{"cells":[{"cell_type":"code","source":"#!/usr/bin/env python3\nimport rospy\nimport sqlite3\nimport os\nimport json\nimport time\nimport random\nimport uuid # For unique emotion event IDs\n\n# --- Asyncio Imports for LLM calls ---\nimport asyncio\nimport aiohttp\nimport threading\nfrom collections import deque\n\nfrom std_msgs.msg import String\n\n# Updated imports for custom messages:\ntry:\n    from sentience.msg import (\n        EmotionState,           # Output: Robot's emotional state\n        SensoryQualia,          # Input: Processed sensory data (can trigger emotions)\n        SocialCognitionState,   # Input: Inferred user mood/intent (social emotional context)\n        InternalNarrative,      # Input: Robot's internal thoughts (self-reflection on feelings)\n        CognitiveDirective,     # Input: Directives for mood adjustment (e.g., \"be more empathetic\")\n        MemoryResponse          # Input: Retrieved emotional memories, past responses\n    )\nexcept ImportError:\n    rospy.logwarn(\"Custom ROS messages for 'sentience' package not found. Using String for all incoming/outgoing data for fallback in Emotion Mood Node.\")\n    EmotionState = String\n    SensoryQualia = String\n    SocialCognitionState = String\n    InternalNarrative = String\n    CognitiveDirective = String\n    MemoryResponse = String\n    String = String # Ensure String is defined even if other custom messages aren't\n\n# --- Import shared utility functions ---\n# Assuming 'sentience/scripts/utils.py' exists and contains parse_ros_message_data and load_config\ntry:\n    from sentience.scripts.utils import parse_ros_message_data, load_config\nexcept ImportError:\n    rospy.logwarn(\"Could not import sentience.scripts.utils. Using fallback for parse_ros_message_data and load_config.\")\n    # Fallback implementations if the utility file isn't available\n    def parse_ros_message_data(msg, fields_map, node_name=\"unknown_node\"):\n        \"\"\"\n        Fallback parser for ROS messages, assuming String message and JSON content.\n        If msg is not String, it attempts to access attributes directly.\n        \"\"\"\n        data = {}\n        if isinstance(msg, String):\n            try:\n                parsed_json = json.loads(msg.data)\n                for key_in_msg, (default_val, target_key) in fields_map.items():\n                    data[target_key] = parsed_json.get(key_in_msg, default_val)\n            except json.JSONDecodeError:\n                rospy.logerr(f\"{node_name}: Could not parse String message data as JSON: {msg.data}\")\n                for key_in_msg, (default_val, target_key) in fields_map.items():\n                    data[target_key] = default_val # Use defaults on JSON error\n        else:\n            # Attempt to get attributes directly from the message object\n            for key_in_msg, (default_val, target_key) in fields_map.items():\n                data[target_key] = getattr(msg, key_in_msg, default_val)\n        return data\n\n    def load_config(node_name, config_path):\n        \"\"\"\n        Fallback config loader: returns hardcoded defaults.\n        In a real scenario, this should load from a YAML file.\n        \"\"\"\n        rospy.logwarn(f\"{node_name}: Using hardcoded default configuration as '{config_path}' could not be loaded.\")\n        return {\n            'db_root_path': '/tmp/sentience_db',\n            'default_log_level': 'INFO',\n            'emotion_mood_node': {\n                'mood_analysis_interval': 0.5, # How often to re-evaluate mood\n                'llm_mood_threshold_salience': 0.6, # Cumulative salience to trigger LLM\n                'recent_context_window_s': 10.0 # Window for deques for LLM context\n            },\n            'llm_params': { # Global LLM parameters for fallback\n                'model_name': \"phi-2\",\n                'base_url': \"http://localhost:8000/v1/chat/completions\",\n                'timeout_seconds': 20.0\n            }\n        }.get(node_name, {}) # Return node-specific or empty dict\n\n\nclass EmotionMoodNode:\n    def __init__(self):\n        rospy.init_node('emotion_mood_node', anonymous=False)\n        self.node_name = rospy.get_name()\n\n        # --- Load parameters from centralized config ---\n        config_file_path = rospy.get_param('~config_file_path', None)\n        if config_file_path is None:\n            rospy.logfatal(f\"{self.node_name}: 'config_file_path' parameter is not set. Cannot load configuration. Shutting down.\")\n            rospy.signal_shutdown(\"Missing config_file_path parameter.\")\n            return\n\n        full_config = load_config(\"global\", config_file_path) # Load global params\n        self.params = load_config(self.node_name.strip('/'), config_file_path) # Load node-specific params\n\n        if not self.params or not full_config:\n            rospy.logfatal(f\"{self.node_name}: Failed to load configuration from '{config_file_path}'. Shutting down.\")\n            rospy.signal_shutdown(\"Configuration loading failed.\")\n            return\n\n        # Assign parameters\n        self.db_path = os.path.join(full_config.get('db_root_path', '/tmp/sentience_db'), \"emotion_log.db\")\n        self.mood_analysis_interval = self.params.get('mood_analysis_interval', 0.5) # How often to re-evaluate mood\n        self.llm_mood_threshold_salience = self.params.get('llm_mood_threshold_salience', 0.6) # Cumulative salience to trigger LLM\n        self.recent_context_window_s = self.params.get('recent_context_window_s', 10.0) # Window for deques for LLM context\n\n        # LLM Parameters (from global config)\n        self.llm_model_name = full_config.get('llm_params', {}).get('model_name', \"phi-2\")\n        self.llm_base_url = full_config.get('llm_params', {}).get('base_url', \"http://localhost:8000/v1/chat/completions\")\n        self.llm_timeout = full_config.get('llm_params', {}).get('timeout_seconds', 20.0) # Timeout for LLM calls\n\n        # Set ROS log level from config\n        rospy.set_param('/rosout/log_level', full_config.get('default_log_level', 'INFO').upper())\n\n\n        # --- Asyncio Setup ---\n        self._async_loop = asyncio.new_event_loop()\n        self._async_thread = threading.Thread(target=self._run_async_loop, daemon=True)\n        self._async_thread.start()\n        self._async_session = None\n        self.active_llm_task = None # To track the currently running LLM task\n\n        # --- Initialize SQLite database ---\n        os.makedirs(os.path.dirname(self.db_path), exist_ok=True)\n        self.conn = sqlite3.connect(self.db_path, check_same_thread=False)\n        self.cursor = self.conn.cursor()\n\n        # Create the 'emotion_log' table if it doesn't exist.\n        # NEW: Added 'llm_reasoning', 'context_snapshot_json'\n        self.cursor.execute('''\n            CREATE TABLE IF NOT EXISTS emotion_log (\n                id TEXT PRIMARY KEY,            -- Unique emotion event ID (UUID)\n                timestamp TEXT,\n                mood TEXT,                      -- e.g., 'neutral', 'happy', 'sad', 'angry'\n                sentiment_score REAL,           -- Numerical sentiment score (-1.0 to 1.0)\n                mood_intensity REAL,            -- Intensity of mood (0.0 to 1.0)\n                llm_reasoning TEXT,             -- NEW: LLM's detailed reasoning for mood inference\n                context_snapshot_json TEXT      -- NEW: JSON of relevant cognitive context at time of inference\n            )\n        ''')\n        self.cursor.execute('CREATE INDEX IF NOT EXISTS idx_emotion_timestamp ON emotion_log (timestamp)')\n        self.conn.commit() # Commit schema changes\n\n        # --- Internal State ---\n        self.current_emotion_state = {\n            'timestamp': str(rospy.get_time()),\n            'mood': 'neutral',\n            'sentiment_score': 0.0,\n            'mood_intensity': 0.1\n        }\n\n        # Deques to maintain a short history of inputs relevant to emotion\n        self.recent_sensory_qualia = deque(maxlen=5)\n        self.recent_social_cognition_states = deque(maxlen=5)\n        self.recent_internal_narratives = deque(maxlen=5)\n        self.recent_cognitive_directives = deque(maxlen=3) # Directives for self for mood adjustment\n        self.recent_memory_responses = deque(maxlen=3) # For recalling emotional memories\n\n        self.cumulative_emotion_salience = 0.0 # Aggregated salience to trigger LLM analysis\n\n        # --- Publishers ---\n        self.pub_emotion_state = rospy.Publisher('/emotion_state', EmotionState, queue_size=10)\n        self.pub_error_report = rospy.Publisher('/error_monitor/report', String, queue_size=10)\n        self.pub_cognitive_directive = rospy.Publisher('/cognitive_directives', CognitiveDirective, queue_size=10) # For requesting self-reflection or memory retrieval\n\n\n        # --- Subscribers ---\n        rospy.Subscriber('/sensory_qualia', SensoryQualia, self.sensory_qualia_callback)\n        rospy.Subscriber('/social_cognition_state', String, self.social_cognition_state_callback) # Stringified JSON\n        rospy.Subscriber('/internal_narrative', InternalNarrative, self.internal_narrative_callback) # Stringified JSON\n        rospy.Subscriber('/cognitive_directives', CognitiveDirective, self.cognitive_directive_callback)\n        rospy.Subscriber('/memory_response', String, self.memory_response_callback) # Stringified JSON\n\n\n        # --- Timer for periodic mood analysis ---\n        rospy.Timer(rospy.Duration(self.mood_analysis_interval), self._run_mood_analysis_wrapper)\n\n        rospy.loginfo(f\"{self.node_name}: Robot's emotion/mood system online.\")\n        # Publish initial state\n        self.publish_emotion_state(None)\n\n    # --- Asyncio Thread Management ---\n    def _run_async_loop(self):\n        asyncio.set_event_loop(self._async_loop)\n        self._async_loop.run_until_complete(self._create_async_session())\n        self._async_loop.run_forever()\n\n    async def _create_async_session(self):\n        rospy.loginfo(f\"{self.node_name}: Creating aiohttp ClientSession...\")\n        self._async_session = aiohttp.ClientSession()\n        rospy.loginfo(f\"{self.node_name}: aiohttp ClientSession created.\")\n\n    async def _close_async_session(self):\n        if self._async_session:\n            rospy.loginfo(f\"{self.node_name}: Closing aiohttp ClientSession...\")\n            await self._async_session.close()\n            self._async_session = None\n            rospy.loginfo(f\"{self.node_name}: aiohttp ClientSession closed.\")\n\n    def _shutdown_async_loop(self):\n        if self._async_loop and self._async_thread.is_alive():\n            rospy.loginfo(f\"{self.node_name}: Shutting down asyncio loop...\")\n            future = asyncio.run_coroutine_threadsafe(self._close_async_session(), self._async_loop)\n            try:\n                future.result(timeout=5.0)\n            except asyncio.TimeoutError:\n                rospy.logwarn(f\"{self.node_name}: Timeout waiting for async session to close.\")\n            self._async_loop.call_soon_threadsafe(self._async_loop.stop)\n            self._async_thread.join(timeout=5.0)\n            if self._async_thread.is_alive():\n                rospy.logwarn(f\"{self.node_name}: Asyncio thread did not shut down gracefully.\")\n            rospy.loginfo(f\"{self.node_name}: Asyncio loop shut down.\")\n\n    def _run_mood_analysis_wrapper(self, event):\n        \"\"\"Wrapper to run the async mood analysis from a ROS timer.\"\"\"\n        if self.active_llm_task and not self.active_llm_task.done():\n            rospy.logdebug(f\"{self.node_name}: LLM mood analysis task already active. Skipping new cycle.\")\n            return\n        \n        # Schedule the async task\n        self.active_llm_task = asyncio.run_coroutine_threadsafe(\n            self.analyze_mood_async(event), self._async_loop\n        )\n\n    # --- Error Reporting Utility ---\n    def _report_error(self, error_type, description, severity=0.5, context=None):\n        timestamp = str(rospy.get_time())\n        error_msg_data = {\n            'timestamp': timestamp, 'source_node': self.node_name, 'error_type': error_type,\n            'description': description, 'severity': severity, 'context': context if context else {}\n        }\n        try:\n            self.pub_error_report.publish(json.dumps(error_msg_data))\n            rospy.logerr(f\"{self.node_name}: REPORTED ERROR: {error_type} - {description}\")\n        except Exception as e:\n            rospy.logerr(f\"{self.node_name}: Failed to publish error report: {e}\")\n\n    # --- LLM Call Function (ADAPTED FOR LOCAL PHI-2 SERVER) ---\n    async def _call_llm_api(self, prompt_text, response_schema=None, temperature=0.6, max_tokens=250):\n        \"\"\"\n        Asynchronously calls the local LLM inference server (e.g., llama.cpp compatible API).\n        Can optionally request a structured JSON response. Moderate temperature for emotional nuance.\n        \"\"\"\n        if not self._async_session:\n            await self._create_async_session() # Attempt to create if not exists\n            if not self._async_session:\n                self._report_error(\"LLM_SESSION_ERROR\", \"aiohttp session not available for LLM call.\", 0.8)\n                return \"Error: LLM session not ready.\"\n\n        payload = {\n            \"model\": self.llm_model_name,\n            \"messages\": [{\"role\": \"user\", \"content\": prompt_text}],\n            \"temperature\": temperature, # Moderate temperature for emotional nuance\n            \"max_tokens\": max_tokens,\n            \"stream\": False\n        }\n        headers = {'Content-Type': 'application/json'}\n\n        if response_schema:\n            prompt_text += \"\\n\\nProvide the response in JSON format according to this schema:\\n\" + json.dumps(response_schema, indent=2)\n            payload[\"messages\"] = [{\"role\": \"user\", \"content\": prompt_text}]\n\n        api_url = self.llm_base_url\n\n        try:\n            async with self._async_session.post(api_url, json=payload, timeout=self.llm_timeout, headers=headers) as response:\n                response.raise_for_status() # Raise an exception for bad status codes\n                result = await response.json()\n\n                if result.get('choices') and result['choices'][0].get('message') and \\\n                   result['choices'][0]['message'].get('content'):\n                    return result['choices'][0]['message']['content']\n                \n                self._report_error(\"LLM_RESPONSE_EMPTY\", \"LLM response had no content from local server.\", 0.5, {'prompt_snippet': prompt_text[:100], 'raw_result': str(result)})\n                return \"Error: LLM response empty.\"\n        except aiohttp.ClientError as e:\n            self._report_error(\"LLM_API_ERROR\", f\"LLM API request failed (aiohttp ClientError to local server): {e}\", 0.9, {'url': api_url})\n            return f\"Error: LLM API request failed: {e}\"\n        except asyncio.TimeoutError:\n            self._report_error(\"LLM_TIMEOUT\", f\"LLM API request timed out after {self.llm_timeout} seconds (local server).\", 0.8, {'prompt_snippet': prompt_text[:100]})\n            return \"Error: LLM API request timed out.\"\n        except json.JSONDecodeError:\n            self._report_error(\"LLM_JSON_PARSE_ERROR\", \"Failed to parse local LLM response JSON.\", 0.7, {'raw_response': str(result) if 'result' in locals() else 'N/A'})\n            return \"Error: Failed to parse LLM response.\"\n        except Exception as e:\n            self._report_error(\"UNEXPECTED_LLM_ERROR\", f\"An unexpected error occurred during local LLM call: {e}\", 0.9, {'prompt_snippet': prompt_text[:100]})\n            return f\"Error: An unexpected error occurred: {e}\"\n\n    # --- Utility to accumulate input salience ---\n    def _update_cumulative_salience(self, score):\n        \"\"\"Accumulates salience from new inputs for triggering LLM analysis.\"\"\"\n        self.cumulative_emotion_salience += score\n        self.cumulative_emotion_salience = min(1.0, self.cumulative_emotion_salience) # Clamp at 1.0\n\n    # --- Pruning old history ---\n    def _prune_history(self):\n        \"\"\"Removes old entries from history deques based on recent_context_window_s.\"\"\"\n        current_time = rospy.get_time()\n        for history_deque in [\n            self.recent_sensory_qualia, self.recent_social_cognition_states,\n            self.recent_internal_narratives, self.recent_cognitive_directives,\n            self.recent_memory_responses\n        ]:\n            while history_deque and (current_time - float(history_deque[0].get('timestamp', 0.0))) > self.recent_context_window_s:\n                history_deque.popleft()\n\n    # --- Callbacks for incoming data (populate history and accumulate salience) ---\n    def sensory_qualia_callback(self, msg):\n        fields_map = {\n            'timestamp': (str(rospy.get_time()), 'timestamp'), 'qualia_id': ('', 'qualia_id'),\n            'qualia_type': ('none', 'qualia_type'), 'modality': ('none', 'modality'),\n            'description_summary': ('', 'description_summary'), 'salience_score': (0.0, 'salience_score'),\n            'raw_data_hash': ('', 'raw_data_hash')\n        }\n        data = parse_ros_message_data(msg, fields_map, node_name=self.node_name)\n        self.recent_sensory_qualia.append(data)\n        # Intense or sudden sensory input\n        if data.get('salience_score', 0.0) > 0.7:\n            self._update_cumulative_salience(data.get('salience_score', 0.0) * 0.4)\n        rospy.logdebug(f\"{self.node_name}: Received Sensory Qualia. Description: {data.get('description_summary', 'N/A')}.\")\n\n    def social_cognition_state_callback(self, msg):\n        fields_map = {\n            'timestamp': (str(rospy.get_time()), 'timestamp'), 'inferred_mood': ('neutral', 'inferred_mood'),\n            'mood_confidence': (0.0, 'mood_confidence'), 'inferred_intent': ('none', 'inferred_intent'),\n            'intent_confidence': (0.0, 'intent_confidence'), 'user_id': ('unknown', 'user_id')\n        }\n        data = parse_ros_message_data(msg, fields_map, node_name=self.node_name)\n        self.recent_social_cognition_states.append(data)\n        # User's inferred mood strongly influences robot's emotional state\n        if data.get('mood_confidence', 0.0) > 0.6:\n            self._update_cumulative_salience(data.get('mood_confidence', 0.0) * 0.8)\n        rospy.logdebug(f\"{self.node_name}: Received Social Cognition State. Mood: {data.get('inferred_mood', 'N/A')}.\")\n\n    def internal_narrative_callback(self, msg):\n        fields_map = {\n            'timestamp': (str(rospy.get_time()), 'timestamp'), 'narrative_text': ('', 'narrative_text'),\n            'main_theme': ('', 'main_theme'), 'sentiment': (0.0, 'sentiment'), 'salience_score': (0.0, 'salience_score')\n        }\n        data = parse_ros_message_data(msg, fields_map, node_name=self.node_name)\n        self.recent_internal_narratives.append(data)\n        # Internal thoughts reflecting on success/failure, or emotional states\n        if data.get('salience_score', 0.0) > 0.3:\n            self._update_cumulative_salience(data.get('salience_score', 0.0) * 0.6)\n        rospy.logdebug(f\"{self.node_name}: Received Internal Narrative (Theme: {data.get('main_theme', 'N/A')}).\")\n\n    def cognitive_directive_callback(self, msg):\n        fields_map = {\n            'timestamp': (str(rospy.get_time()), 'timestamp'), 'directive_type': ('', 'directive_type'),\n            'target_node': ('', 'target_node'), 'command_payload': ('{}', 'command_payload'),\n            'urgency': (0.0, 'urgency'), 'reason': ('', 'reason')\n        }\n        data = parse_ros_message_data(msg, fields_map, node_name=self.node_name)\n        \n        if data.get('target_node') == self.node_name:\n            self.recent_cognitive_directives.append(data) # Add directives for self to context\n            # Directives for mood adjustment (e.g., 'AdjustMood', 'Empathize')\n            if data.get('directive_type') in ['AdjustMood', 'Empathize']:\n                self._update_cumulative_salience(data.get('urgency', 0.0) * 0.9)\n            rospy.loginfo(f\"{self.node_name}: Received directive for self: '{data.get('directive_type', 'N/A')}' (Payload: {data.get('command_payload', 'N/A')}).\")\n        else:\n            self.recent_cognitive_directives.append(data) # Add all directives for general context\n        rospy.logdebug(f\"{self.node_name}: Cognitive Directive received for context/action.\")\n\n    def memory_response_callback(self, msg):\n        fields_map = {\n            'timestamp': (str(rospy.get_time()), 'timestamp'), 'request_id': ('', 'request_id'),\n            'response_code': (0, 'response_code'), 'memories_json': ('[]', 'memories_json')\n        }\n        data = parse_ros_message_data(msg, fields_map, node_name=self.node_name)\n        if isinstance(data.get('memories_json'), str):\n            try: data['memories'] = json.loads(data['memories_json'])\n            except json.JSONDecodeError: data['memories'] = []\n        else: data['memories'] = []\n        self.recent_memory_responses.append(data)\n        # Memory recall of past emotional experiences or emotional context of events\n        if data.get('response_code', 0) == 200 and \\\n           any('emotional_event' in mem.get('category', '') for mem in data['memories']):\n            self._update_cumulative_salience(0.5)\n        rospy.logdebug(f\"{self.node_name}: Received Memory Response for request ID: {data.get('request_id', 'N/A')}.\")\n\n\n    # --- Core Emotion Analysis Logic (Async with LLM) ---\n    async def analyze_mood_async(self, event):\n        \"\"\"\n        Asynchronously analyzes recent cognitive states to infer the robot's current\n        emotional state and its intensity, using LLM for nuanced interpretation.\n        \"\"\"\n        self._prune_history() # Keep context history fresh\n\n        if self.cumulative_emotion_salience >= self.llm_mood_threshold_salience:\n            rospy.loginfo(f\"{self.node_name}: Triggering LLM for emotion analysis (Salience: {self.cumulative_emotion_salience:.2f}).\")\n            \n            context_for_llm = self._compile_llm_context_for_emotion()\n            llm_emotion_output = await self._infer_emotion_state_llm(context_for_llm)\n\n            if llm_emotion_output:\n                emotion_event_id = str(uuid.uuid4())\n                timestamp = llm_emotion_output.get('timestamp', str(rospy.get_time()))\n                mood = llm_emotion_output.get('mood', 'neutral')\n                sentiment_score = max(-1.0, min(1.0, llm_emotion_output.get('sentiment_score', 0.0)))\n                mood_intensity = max(0.0, min(1.0, llm_emotion_output.get('mood_intensity', 0.0)))\n                llm_reasoning = llm_emotion_output.get('llm_reasoning', 'No reasoning.')\n\n                self.current_emotion_state = {\n                    'timestamp': timestamp,\n                    'mood': mood,\n                    'sentiment_score': sentiment_score,\n                    'mood_intensity': mood_intensity\n                }\n\n                self.save_emotion_log(\n                    id=emotion_event_id,\n                    timestamp=timestamp,\n                    mood=mood,\n                    sentiment_score=sentiment_score,\n                    mood_intensity=mood_intensity,\n                    llm_reasoning=llm_reasoning,\n                    context_snapshot_json=json.dumps(context_for_llm)\n                )\n                self.publish_emotion_state(None) # Publish updated state\n                rospy.loginfo(f\"{self.node_name}: Inferred Emotion: '{mood}' (Sentiment: {sentiment_score:.2f}, Intensity: {mood_intensity:.2f}).\")\n                self.cumulative_emotion_salience = 0.0 # Reset after LLM analysis\n            else:\n                rospy.logwarn(f\"{self.node_name}: LLM failed to infer emotion state. Applying simple fallback.\")\n                self._apply_simple_emotion_rules() # Fallback to simple rules\n        else:\n            rospy.logdebug(f\"{self.node_name}: Insufficient cumulative salience ({self.cumulative_emotion_salience:.2f}) for LLM emotion analysis. Applying simple rules.\")\n            self._apply_simple_emotion_rules()\n        \n        self.publish_emotion_state(None) # Always publish state, even if updated by simple rules\n\n\n    async def _infer_emotion_state_llm(self, context_for_llm):\n        \"\"\"\n        Uses the LLM to infer the robot's current emotional state.\n        \"\"\"\n        prompt_text = f\"\"\"\n        You are the Emotion Mood Module of a robot's cognitive architecture. Your task is to infer the robot's current emotional state (mood, sentiment, intensity) based on a synthesis of its recent sensory experiences, social interactions, internal thoughts, and explicit directives. The goal is to provide a nuanced understanding of the robot's affective state.\n\n        Robot's Recent Cognitive Context (for Emotion Inference):\n        --- Cognitive Context ---\n        {json.dumps(context_for_llm, indent=2)}\n\n        Based on this context, provide:\n        1.  `mood`: string (The primary emotion, e.g., 'neutral', 'happy', 'sad', 'angry', 'surprised', 'fearful', 'disgusted', 'curious', 'frustrated').\n        2.  `sentiment_score`: number (-1.0 to 1.0, where -1.0 is very negative, 0.0 is neutral, and 1.0 is very positive).\n        3.  `mood_intensity`: number (0.0 to 1.0, indicating the strength of the emotion. 0.0 is no intensity, 1.0 is extremely intense).\n        4.  `llm_reasoning`: string (Detailed explanation for your emotion inference, referencing specific contextual inputs and their emotional impact).\n\n        Consider:\n        -   **Sensory Qualia**: Are there highly `salient_score` events, especially those with implicit positive/negative valences (e.g., pleasant sounds, harsh noises)?\n        -   **Social Cognition State**: What is the `inferred_mood` and `inferred_intent` of the user? How might this affect the robot's mood (e.g., empathy, frustration from negative intent)?\n        -   **Internal Narratives**: Does the robot's self-talk reflect success/failure, comfort/discomfort, or anticipation? What is its `sentiment`?\n        -   **Cognitive Directives**: Has Cognitive Control issued directives like 'AdjustMood' or 'Empathize' that should influence the current mood?\n        -   **Memory Responses**: Are there recent memory recalls of emotionally significant events or outcomes that re-evoke a feeling?\n\n        Your response must be in JSON format, containing:\n        1.  'timestamp': string (current ROS time)\n        2.  'mood': string\n        3.  'sentiment_score': number\n        4.  'mood_intensity': number\n        5.  'llm_reasoning': string\n        \"\"\"\n        response_schema = {\n            \"type\": \"object\",\n            \"properties\": {\n                \"timestamp\": {\"type\": \"string\"},\n                \"mood\": {\"type\": \"string\"},\n                \"sentiment_score\": {\"type\": \"number\", \"minimum\": -1.0, \"maximum\": 1.0},\n                \"mood_intensity\": {\"type\": \"number\", \"minimum\": 0.0, \"maximum\": 1.0},\n                \"llm_reasoning\": {\"type\": \"string\"}\n            },\n            \"required\": [\"timestamp\", \"mood\", \"sentiment_score\", \"mood_intensity\", \"llm_reasoning\"]\n        }\n\n        llm_output_str = await self._call_llm_api(prompt_text, response_schema, temperature=0.6, max_tokens=300)\n\n        if not llm_output_str.startswith(\"Error:\"):\n            try:\n                llm_data = json.loads(llm_output_str)\n                # Ensure numerical fields are floats\n                if 'sentiment_score' in llm_data: llm_data['sentiment_score'] = float(llm_data['sentiment_score'])\n                if 'mood_intensity' in llm_data: llm_data['mood_intensity'] = float(llm_data['mood_intensity'])\n                return llm_data\n            except json.JSONDecodeError as e:\n                self._report_error(\"LLM_PARSE_ERROR\", f\"Failed to parse LLM response for emotion: {e}. Raw: {llm_output_str}\", 0.8)\n                return None\n        else:\n            self._report_error(\"LLM_EMOTION_ANALYSIS_FAILED\", f\"LLM call failed for emotion: {llm_output_str}\", 0.9)\n            return None\n\n    def _apply_simple_emotion_rules(self):\n        \"\"\"\n        Fallback mechanism to infer emotion state using simple rule-based logic\n        if LLM is not triggered or fails.\n        \"\"\"\n        current_time = rospy.get_time()\n        \n        new_mood = \"neutral\"\n        new_sentiment_score = 0.0\n        new_mood_intensity = 0.1\n\n        # Rule 1: React to user's mood (simple empathy)\n        if self.recent_social_cognition_states:\n            latest_social = self.recent_social_cognition_states[-1]\n            time_since_social = current_time - float(latest_social.get('timestamp', 0.0))\n            if time_since_social < 2.0 and latest_social.get('mood_confidence', 0.0) > 0.5:\n                inferred_user_mood = latest_social.get('inferred_mood', 'neutral')\n                mood_confidence = latest_social.get('mood_confidence', 0.0)\n                \n                if inferred_user_mood == 'happy':\n                    new_mood = 'happy'\n                    new_sentiment_score = 0.5 * mood_confidence\n                    new_mood_intensity = 0.4 * mood_confidence\n                elif inferred_user_mood == 'sad':\n                    new_mood = 'sad'\n                    new_sentiment_score = -0.5 * mood_confidence\n                    new_mood_intensity = 0.4 * mood_confidence\n                elif inferred_user_mood == 'angry':\n                    new_mood = 'concerned' # Robot might feel concerned if user is angry\n                    new_sentiment_score = -0.3 * mood_confidence\n                    new_mood_intensity = 0.3 * mood_confidence\n                \n                rospy.logdebug(f\"{self.node_name}: Simple rule: Reacting to user's mood ({inferred_user_mood}).\")\n                self.current_emotion_state = {\n                    'timestamp': str(current_time),\n                    'mood': new_mood,\n                    'sentiment_score': new_sentiment_score,\n                    'mood_intensity': new_mood_intensity\n                }\n                return # Rule applied\n\n        # Rule 2: React to strong internal narratives (success/failure)\n        if self.recent_internal_narratives:\n            latest_narrative = self.recent_internal_narratives[-1]\n            time_since_narrative = current_time - float(latest_narrative.get('timestamp', 0.0))\n            if time_since_narrative < 2.0 and abs(latest_narrative.get('sentiment', 0.0)) > 0.6:\n                narrative_sentiment = latest_narrative.get('sentiment', 0.0)\n                if narrative_sentiment > 0.6:\n                    new_mood = 'satisfied'\n                    new_sentiment_score = 0.7\n                    new_mood_intensity = 0.6\n                elif narrative_sentiment < -0.6:\n                    new_mood = 'frustrated'\n                    new_sentiment_score = -0.7\n                    new_mood_intensity = 0.6\n                rospy.logdebug(f\"{self.node_name}: Simple rule: Reacting to internal narrative sentiment.\")\n                self.current_emotion_state = {\n                    'timestamp': str(current_time),\n                    'mood': new_mood,\n                    'sentiment_score': new_sentiment_score,\n                    'mood_intensity': new_mood_intensity\n                }\n                return # Rule applied\n\n        # Rule 3: Respond to explicit mood adjustment directives\n        if self.recent_cognitive_directives:\n            latest_directive = self.recent_cognitive_directives[-1]\n            time_since_directive = current_time - float(latest_directive.get('timestamp', 0.0))\n            if time_since_directive < 1.0 and latest_directive.get('target_node') == self.node_name and \\\n               latest_directive.get('directive_type') == 'AdjustMood':\n                payload = json.loads(latest_directive.get('command_payload', '{}'))\n                target_mood = payload.get('target_mood', 'neutral')\n                target_intensity = payload.get('target_intensity', 0.5)\n\n                if target_mood == 'happy':\n                    new_mood = 'happy'\n                    new_sentiment_score = 0.8\n                elif target_mood == 'calm':\n                    new_mood = 'calm'\n                    new_sentiment_score = 0.2\n                else: # Default to neutral for unknown target mood\n                    new_mood = 'neutral'\n                    new_sentiment_score = 0.0\n                new_mood_intensity = target_intensity\n\n                rospy.logdebug(f\"{self.node_name}: Simple rule: Adjusting mood based on directive to '{target_mood}'.\")\n                self.current_emotion_state = {\n                    'timestamp': str(current_time),\n                    'mood': new_mood,\n                    'sentiment_score': new_sentiment_score,\n                    'mood_intensity': new_mood_intensity\n                }\n                return # Rule applied\n\n        # If no specific rule triggered, maintain current emotion or default to neutral\n        rospy.logdebug(f\"{self.node_name}: Simple rule: Maintaining current emotion state or defaulting to neutral.\")\n        self.current_emotion_state = {\n            'timestamp': str(current_time),\n            'mood': self.current_emotion_state.get('mood', 'neutral'),\n            'sentiment_score': self.current_emotion_state.get('sentiment_score', 0.0),\n            'mood_intensity': self.current_emotion_state.get('mood_intensity', 0.1)\n        }\n\n\n    def _compile_llm_context_for_emotion(self):\n        \"\"\"\n        Gathers and formats all relevant cognitive state data for the LLM's\n        emotion inference.\n        \"\"\"\n        context = {\n            \"current_time\": rospy.get_time(),\n            \"current_emotion_state\": self.current_emotion_state,\n            \"recent_cognitive_inputs\": {\n                \"sensory_qualia\": list(self.recent_sensory_qualia),\n                \"social_cognition_states\": list(self.recent_social_cognition_states),\n                \"internal_narratives\": list(self.recent_internal_narratives),\n                \"cognitive_directives_for_self\": [d for d in self.recent_cognitive_directives if d.get('target_node') == self.node_name],\n                \"memory_responses\": list(self.recent_memory_responses)\n            }\n        }\n        \n        # Deep parse any nested JSON strings in history for better LLM understanding\n        for category_key in context[\"recent_cognitive_inputs\"]:\n            for i, item in enumerate(context[\"recent_cognitive_inputs\"][category_key]):\n                if isinstance(item, dict):\n                    for field, value in item.items():\n                        if isinstance(value, str) and field.endswith('_json'):\n                            try:\n                                item[field] = json.loads(value)\n                            except json.JSONDecodeError:\n                                pass # Keep as string if not valid JSON\n        return context\n\n    # --- Database and Publishing Functions ---\n    def save_emotion_log(self, id, timestamp, mood, sentiment_score, mood_intensity, llm_reasoning, context_snapshot_json):\n        \"\"\"Saves an emotion state entry to the SQLite database.\"\"\"\n        try:\n            self.cursor.execute('''\n                INSERT INTO emotion_log (id, timestamp, mood, sentiment_score, mood_intensity, llm_reasoning, context_snapshot_json)\n                VALUES (?, ?, ?, ?, ?, ?, ?)\n            ''', (id, timestamp, mood, sentiment_score, mood_intensity, llm_reasoning, context_snapshot_json))\n            self.conn.commit()\n            rospy.logdebug(f\"{self.node_name}: Saved emotion log (ID: {id}, Mood: {mood}).\")\n        except sqlite3.Error as e:\n            self._report_error(\"DB_SAVE_ERROR\", f\"Failed to save emotion log: {e}\", 0.9)\n        except Exception as e:\n            self._report_error(\"UNEXPECTED_SAVE_ERROR\", f\"Unexpected error in save_emotion_log: {e}\", 0.9)\n\n\n    def publish_emotion_state(self, event):\n        \"\"\"Publishes the robot's current emotion state.\"\"\"\n        timestamp = str(rospy.get_time())\n        # Update timestamp before publishing\n        self.current_emotion_state['timestamp'] = timestamp\n        \n        try:\n            if isinstance(EmotionState, type(String)): # Fallback to String message\n                self.pub_emotion_state.publish(json.dumps(self.current_emotion_state))\n            else:\n                emotion_msg = EmotionState()\n                emotion_msg.timestamp = timestamp\n                emotion_msg.mood = self.current_emotion_state['mood']\n                emotion_msg.sentiment_score = self.current_emotion_state['sentiment_score']\n                emotion_msg.mood_intensity = self.current_emotion_state['mood_intensity']\n                self.pub_emotion_state.publish(emotion_msg)\n\n            rospy.logdebug(f\"{self.node_name}: Published Emotion State. Mood: '{self.current_emotion_state['mood']}'.\")\n\n        except Exception as e:\n            self._report_error(\"PUBLISH_EMOTION_STATE_ERROR\", f\"Failed to publish emotion state: {e}\", 0.7)\n\n    def publish_cognitive_directive(self, directive_type, target_node, command_payload, urgency, reason=\"\"):\n        \"\"\"Helper to publish a CognitiveDirective message.\"\"\"\n        timestamp = str(rospy.get_time())\n        try:\n            if isinstance(CognitiveDirective, type(String)): # Fallback to String message\n                directive_data = {\n                    'timestamp': timestamp,\n                    'directive_type': directive_type,\n                    'target_node': target_node,\n                    'command_payload': command_payload, # Already JSON string\n                    'urgency': urgency,\n                    'reason': reason\n                }\n                self.pub_cognitive_directive.publish(json.dumps(directive_data))\n            else:\n                directive_msg = CognitiveDirective()\n                directive_msg.timestamp = timestamp\n                directive_msg.directive_type = directive_type\n                directive_msg.target_node = target_node\n                directive_msg.command_payload = command_payload\n                directive_msg.urgency = urgency\n                directive_msg.reason = reason\n                self.pub_cognitive_directive.publish(directive_msg)\n            rospy.logdebug(f\"{self.node_name}: Issued Cognitive Directive '{directive_type}' to '{target_node}'.\")\n        except Exception as e:\n            rospy.logerr(f\"{self.node_name}: Failed to issue cognitive directive from Emotion Mood Node: {e}\")\n\n\n    def run(self):\n        \"\"\"Starts the ROS node and keeps it spinning.\"\"\"\n        rospy.spin()\n\n    def __del__(self):\n        \"\"\"Ensures the database connection is closed on node shutdown and async loop is stopped.\"\"\"\n        rospy.loginfo(f\"{self.node_name} shutting down. Closing database connection and asyncio loop.\")\n        if hasattr(self, 'conn') and self.conn:\n            self.conn.close()\n        self._shutdown_async_loop()\n\nif __name__ == '__main__':\n    try:\n        node = EmotionMoodNode()\n        node.run()\n    except rospy.ROSInterruptException:\n        rospy.loginfo(f\"{rospy.get_name()} interrupted by ROS shutdown.\")\n        if 'node' in locals() and isinstance(node, EmotionMoodNode):\n            node._shutdown_async_loop()\n            if hasattr(node, 'conn'): node.conn.close()\n    except Exception as e:\n        rospy.logerr(f\"{rospy.get_name()} encountered an unexpected error: {e}\")\n        if 'node' in locals() and isinstance(node, EmotionMoodNode):\n            node._shutdown_async_loop()\n            if hasattr(node, 'conn'): node.conn.close()","outputs":[],"execution_count":null,"metadata":{}}],"metadata":{"colab":{"from_bard":true},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}