{"cells":[{"cell_type":"code","source":"#!/usr/bin/env python3\nimport rospy\nimport sqlite3\nimport os\nimport json\nimport time\nimport random\nimport uuid # For unique attention log IDs\n\n# --- Asyncio Imports for LLM calls ---\nimport asyncio\nimport aiohttp\nimport threading\nfrom collections import deque\n\nfrom std_msgs.msg import String\n\n# Updated imports for custom messages:\ntry:\n    from sentience.msg import (\n        AttentionState,         # Output: Robot's current attention focus\n        SensoryQualia,          # Input: Salient sensory events\n        SocialCognitionState,   # Input: Inferred user mood/intent (e.g., direct commands, distress)\n        EmotionState,           # Input: Robot's own emotional state (e.g., anxiety, curiosity)\n        MotivationState,        # Input: Current dominant goal (goal-driven attention)\n        PerformanceReport,      # Input: Suboptimal performance (can trigger attention to self-audit)\n        CognitiveDirective      # Input: Directives to shift attention focus\n    )\nexcept ImportError:\n    rospy.logwarn(\"Custom ROS messages for 'sentience' package not found. Using String for all incoming/outgoing data for fallback in Attention Node.\")\n    AttentionState = String\n    SensoryQualia = String\n    SocialCognitionState = String\n    EmotionState = String\n    MotivationState = String\n    PerformanceReport = String\n    CognitiveDirective = String\n    String = String # Ensure String is defined even if other custom messages aren't\n\n# --- Import shared utility functions ---\n# Assuming 'sentience/scripts/utils.py' exists and contains parse_ros_message_data and load_config\ntry:\n    from sentience.scripts.utils import parse_ros_message_data, load_config\nexcept ImportError:\n    rospy.logwarn(\"Could not import sentience.scripts.utils. Using fallback for parse_ros_message_data and load_config.\")\n    # Fallback implementations if the utility file isn't available\n    def parse_ros_message_data(msg, fields_map, node_name=\"unknown_node\"):\n        \"\"\"\n        Fallback parser for ROS messages, assuming String message and JSON content.\n        If msg is not String, it attempts to access attributes directly.\n        \"\"\"\n        data = {}\n        if isinstance(msg, String):\n            try:\n                parsed_json = json.loads(msg.data)\n                for key_in_msg, (default_val, target_key) in fields_map.items():\n                    data[target_key] = parsed_json.get(key_in_msg, default_val)\n            except json.JSONDecodeError:\n                rospy.logerr(f\"{node_name}: Could not parse String message data as JSON: {msg.data}\")\n                for key_in_msg, (default_val, target_key) in fields_map.items():\n                    data[target_key] = default_val # Use defaults on JSON error\n        else:\n            # Attempt to get attributes directly from the message object\n            for key_in_msg, (default_val, target_key) in fields_map.items():\n                data[target_key] = getattr(msg, key_in_msg, default_val)\n        return data\n\n    def load_config(node_name, config_path):\n        \"\"\"\n        Fallback config loader: returns hardcoded defaults.\n        In a real scenario, this should load from a YAML file.\n        \"\"\"\n        rospy.logwarn(f\"{node_name}: Using hardcoded default configuration as '{config_path}' could not be loaded.\")\n        return {\n            'db_root_path': '/tmp/sentience_db',\n            'default_log_level': 'INFO',\n            'attention_node': {\n                'attention_update_interval': 0.1, # How often to re-evaluate attention\n                'llm_attention_threshold_salience': 0.5, # Cumulative salience to trigger LLM\n                'recent_context_window_s': 5.0 # Window for deques for LLM context\n            },\n            'llm_params': { # Global LLM parameters for fallback\n                'model_name': \"phi-2\",\n                'base_url': \"http://localhost:8000/v1/chat/completions\",\n                'timeout_seconds': 20.0\n            }\n        }.get(node_name, {}) # Return node-specific or empty dict\n\n\nclass AttentionNode:\n    def __init__(self):\n        rospy.init_node('attention_node', anonymous=False)\n        self.node_name = rospy.get_name()\n\n        # --- Load parameters from centralized config ---\n        config_file_path = rospy.get_param('~config_file_path', None)\n        if config_file_path is None:\n            rospy.logfatal(f\"{self.node_name}: 'config_file_path' parameter is not set. Cannot load configuration. Shutting down.\")\n            rospy.signal_shutdown(\"Missing config_file_path parameter.\")\n            return\n\n        full_config = load_config(\"global\", config_file_path) # Load global params\n        self.params = load_config(self.node_name.strip('/'), config_file_path) # Load node-specific params\n\n        if not self.params or not full_config:\n            rospy.logfatal(f\"{self.node_name}: Failed to load configuration from '{config_file_path}'. Shutting down.\")\n            rospy.signal_shutdown(\"Configuration loading failed.\")\n            return\n\n        # Assign parameters\n        self.db_path = os.path.join(full_config.get('db_root_path', '/tmp/sentience_db'), \"attention_log.db\")\n        self.attention_update_interval = self.params.get('attention_update_interval', 0.1) # How often to update attention\n        self.llm_attention_threshold_salience = self.params.get('llm_attention_threshold_salience', 0.5) # Cumulative salience to trigger LLM\n        self.recent_context_window_s = self.params.get('recent_context_window_s', 5.0) # Window for deques for LLM context\n\n        # LLM Parameters (from global config)\n        self.llm_model_name = full_config.get('llm_params', {}).get('model_name', \"phi-2\")\n        self.llm_base_url = full_config.get('llm_params', {}).get('base_url', \"http://localhost:8000/v1/chat/completions\")\n        self.llm_timeout = full_config.get('llm_params', {}).get('timeout_seconds', 20.0) # Timeout for LLM calls\n\n        # Set ROS log level from config\n        rospy.set_param('/rosout/log_level', full_config.get('default_log_level', 'INFO').upper())\n\n\n        # --- Asyncio Setup ---\n        self._async_loop = asyncio.new_event_loop()\n        self._async_thread = threading.Thread(target=self._run_async_loop, daemon=True)\n        self._async_thread.start()\n        self._async_session = None\n        self.active_llm_task = None # To track the currently running LLM task\n\n        # --- Initialize SQLite database ---\n        os.makedirs(os.path.dirname(self.db_path), exist_ok=True)\n        self.conn = sqlite3.connect(self.db_path, check_same_thread=False)\n        self.cursor = self.conn.cursor()\n\n        # Create the 'attention_log' table if it doesn't exist.\n        # NEW: Added 'llm_reasoning', 'context_snapshot_json'\n        self.cursor.execute('''\n            CREATE TABLE IF NOT EXISTS attention_log (\n                id TEXT PRIMARY KEY,            -- Unique attention update ID (UUID)\n                timestamp TEXT,\n                focus_type TEXT,                -- e.g., 'sensory_event', 'user_interaction', 'internal_reflection', 'goal_driven'\n                focus_target TEXT,              -- Specific entity or concept attention is directed at\n                priority_score REAL,            -- Overall priority/intensity of attention (0.0 to 1.0)\n                llm_reasoning TEXT,             -- NEW: LLM's detailed reasoning for attention shift\n                context_snapshot_json TEXT      -- NEW: JSON of relevant cognitive context at time of update\n            )\n        ''')\n        self.cursor.execute('CREATE INDEX IF NOT EXISTS idx_attention_timestamp ON attention_log (timestamp)')\n        self.conn.commit() # Commit schema changes\n\n        # --- Internal State ---\n        self.current_attention_state = {\n            'timestamp': str(rospy.get_time()),\n            'focus_type': 'idle',\n            'focus_target': 'environment',\n            'priority_score': 0.1\n        }\n\n        # Deques to maintain a short history of inputs relevant to attention\n        self.recent_sensory_qualia = deque(maxlen=5) # High salience sensory events\n        self.recent_social_cognition_states = deque(maxlen=3) # User commands, emotional cues\n        self.recent_emotion_states = deque(maxlen=3) # Robot's own strong emotions\n        self.recent_motivation_states = deque(maxlen=3) # Current goals\n        self.recent_performance_reports = deque(maxlen=3) # Performance issues needing attention\n        self.recent_cognitive_directives = deque(maxlen=3) # Direct commands to shift attention\n\n\n        self.cumulative_attention_salience = 0.0 # Aggregated salience to trigger LLM analysis\n\n        # --- Publishers ---\n        self.pub_attention_state = rospy.Publisher('/attention_state', AttentionState, queue_size=10)\n        self.pub_error_report = rospy.Publisher('/error_monitor/report', String, queue_size=10)\n        self.pub_cognitive_directive = rospy.Publisher('/cognitive_directives', CognitiveDirective, queue_size=10) # To request more info from other nodes\n\n\n        # --- Subscribers ---\n        rospy.Subscriber('/sensory_qualia', SensoryQualia, self.sensory_qualia_callback)\n        rospy.Subscriber('/social_cognition_state', String, self.social_cognition_state_callback) # Stringified JSON\n        rospy.Subscriber('/emotion_state', EmotionState, self.emotion_state_callback)\n        rospy.Subscriber('/motivation_state', String, self.motivation_state_callback) # Stringified JSON\n        rospy.Subscriber('/performance_report', PerformanceReport, self.performance_report_callback)\n        rospy.Subscriber('/cognitive_directives', CognitiveDirective, self.cognitive_directive_callback)\n\n\n        # --- Timer for periodic attention analysis ---\n        rospy.Timer(rospy.Duration(self.attention_update_interval), self._run_attention_analysis_wrapper)\n\n        rospy.loginfo(f\"{self.node_name}: Robot's attention system online.\")\n        # Publish initial state\n        self.publish_attention_state(None)\n\n    # --- Asyncio Thread Management ---\n    def _run_async_loop(self):\n        asyncio.set_event_loop(self._async_loop)\n        self._async_loop.run_until_complete(self._create_async_session())\n        self._async_loop.run_forever()\n\n    async def _create_async_session(self):\n        rospy.loginfo(f\"{self.node_name}: Creating aiohttp ClientSession...\")\n        self._async_session = aiohttp.ClientSession()\n        rospy.loginfo(f\"{self.node_name}: aiohttp ClientSession created.\")\n\n    async def _close_async_session(self):\n        if self._async_session:\n            rospy.loginfo(f\"{self.node_name}: Closing aiohttp ClientSession...\")\n            await self._async_session.close()\n            self._async_session = None\n            rospy.loginfo(f\"{self.node_name}: aiohttp ClientSession closed.\")\n\n    def _shutdown_async_loop(self):\n        if self._async_loop and self._async_thread.is_alive():\n            rospy.loginfo(f\"{self.node_name}: Shutting down asyncio loop...\")\n            future = asyncio.run_coroutine_threadsafe(self._close_async_session(), self._async_loop)\n            try:\n                future.result(timeout=5.0)\n            except asyncio.TimeoutError:\n                rospy.logwarn(f\"{self.node_name}: Timeout waiting for async session to close.\")\n            self._async_loop.call_soon_threadsafe(self._async_loop.stop)\n            self._async_thread.join(timeout=5.0)\n            if self._async_thread.is_alive():\n                rospy.logwarn(f\"{self.node_name}: Asyncio thread did not shut down gracefully.\")\n            rospy.loginfo(f\"{self.node_name}: Asyncio loop shut down.\")\n\n    def _run_attention_analysis_wrapper(self, event):\n        \"\"\"Wrapper to run the async attention analysis from a ROS timer.\"\"\"\n        if self.active_llm_task and not self.active_llm_task.done():\n            rospy.logdebug(f\"{self.node_name}: LLM attention analysis task already active. Skipping new cycle.\")\n            return\n        \n        # Schedule the async task\n        self.active_llm_task = asyncio.run_coroutine_threadsafe(\n            self.analyze_attention_async(event), self._async_loop\n        )\n\n    # --- Error Reporting Utility ---\n    def _report_error(self, error_type, description, severity=0.5, context=None):\n        timestamp = str(rospy.get_time())\n        error_msg_data = {\n            'timestamp': timestamp, 'source_node': self.node_name, 'error_type': error_type,\n            'description': description, 'severity': severity, 'context': context if context else {}\n        }\n        try:\n            self.pub_error_report.publish(json.dumps(error_msg_data))\n            rospy.logerr(f\"{self.node_name}: REPORTED ERROR: {error_type} - {description}\")\n        except Exception as e:\n            rospy.logerr(f\"{self.node_name}: Failed to publish error report: {e}\")\n\n    # --- LLM Call Function (ADAPTED FOR LOCAL PHI-2 SERVER) ---\n    async def _call_llm_api(self, prompt_text, response_schema=None, temperature=0.3, max_tokens=200):\n        \"\"\"\n        Asynchronously calls the local LLM inference server (e.g., llama.cpp compatible API).\n        Can optionally request a structured JSON response. Moderate temperature for attention focus.\n        \"\"\"\n        if not self._async_session:\n            await self._create_async_session() # Attempt to create if not exists\n            if not self._async_session:\n                self._report_error(\"LLM_SESSION_ERROR\", \"aiohttp session not available for LLM call.\", 0.8)\n                return \"Error: LLM session not ready.\"\n\n        payload = {\n            \"model\": self.llm_model_name,\n            \"messages\": [{\"role\": \"user\", \"content\": prompt_text}],\n            \"temperature\": temperature, # Moderate temperature for attention focus decision\n            \"max_tokens\": max_tokens,\n            \"stream\": False\n        }\n        headers = {'Content-Type': 'application/json'}\n\n        if response_schema:\n            prompt_text += \"\\n\\nProvide the response in JSON format according to this schema:\\n\" + json.dumps(response_schema, indent=2)\n            payload[\"messages\"] = [{\"role\": \"user\", \"content\": prompt_text}]\n\n        api_url = self.llm_base_url\n\n        try:\n            async with self._async_session.post(api_url, json=payload, timeout=self.llm_timeout, headers=headers) as response:\n                response.raise_for_status() # Raise an exception for bad status codes\n                result = await response.json()\n\n                if result.get('choices') and result['choices'][0].get('message') and \\\n                   result['choices'][0]['message'].get('content'):\n                    return result['choices'][0]['message']['content']\n                \n                self._report_error(\"LLM_RESPONSE_EMPTY\", \"LLM response had no content from local server.\", 0.5, {'prompt_snippet': prompt_text[:100], 'raw_result': str(result)})\n                return \"Error: LLM response empty.\"\n        except aiohttp.ClientError as e:\n            self._report_error(\"LLM_API_ERROR\", f\"LLM API request failed (aiohttp ClientError to local server): {e}\", 0.9, {'url': api_url})\n            return f\"Error: LLM API request failed: {e}\"\n        except asyncio.TimeoutError:\n            self._report_error(\"LLM_TIMEOUT\", f\"LLM API request timed out after {self.llm_timeout} seconds (local server).\", 0.8, {'prompt_snippet': prompt_text[:100]})\n            return \"Error: LLM API request timed out.\"\n        except json.JSONDecodeError:\n            self._report_error(\"LLM_JSON_PARSE_ERROR\", \"Failed to parse local LLM response JSON.\", 0.7, {'raw_response': str(result) if 'result' in locals() else 'N/A'})\n            return \"Error: Failed to parse LLM response.\"\n        except Exception as e:\n            self._report_error(\"UNEXPECTED_LLM_ERROR\", f\"An unexpected error occurred during local LLM call: {e}\", 0.9, {'prompt_snippet': prompt_text[:100]})\n            return f\"Error: An unexpected error occurred: {e}\"\n\n    # --- Utility to accumulate input salience ---\n    def _update_cumulative_salience(self, score):\n        \"\"\"Accumulates salience from new inputs for triggering LLM analysis.\"\"\"\n        self.cumulative_attention_salience += score\n        self.cumulative_attention_salience = min(1.0, self.cumulative_attention_salience) # Clamp at 1.0\n\n    # --- Pruning old history ---\n    def _prune_history(self):\n        \"\"\"Removes old entries from history deques based on recent_context_window_s.\"\"\"\n        current_time = rospy.get_time()\n        for history_deque in [\n            self.recent_sensory_qualia, self.recent_social_cognition_states,\n            self.recent_emotion_states, self.recent_motivation_states,\n            self.recent_performance_reports, self.recent_cognitive_directives\n        ]:\n            while history_deque and (current_time - float(history_deque[0].get('timestamp', 0.0))) > self.recent_context_window_s:\n                history_deque.popleft()\n\n    # --- Callbacks for incoming data (populate history and accumulate salience) ---\n    def sensory_qualia_callback(self, msg):\n        fields_map = {\n            'timestamp': (str(rospy.get_time()), 'timestamp'), 'qualia_id': ('', 'qualia_id'),\n            'qualia_type': ('none', 'qualia_type'), 'modality': ('none', 'modality'),\n            'description_summary': ('', 'description_summary'), 'salience_score': (0.0, 'salience_score'),\n            'raw_data_hash': ('', 'raw_data_hash')\n        }\n        data = parse_ros_message_data(msg, fields_map, node_name=self.node_name)\n        self.recent_sensory_qualia.append(data)\n        # High salience sensory events demand attention\n        self._update_cumulative_salience(data.get('salience_score', 0.0) * 0.5)\n        rospy.logdebug(f\"{self.node_name}: Received Sensory Qualia. Description: {data.get('description_summary', 'N/A')}.\")\n\n    def social_cognition_state_callback(self, msg):\n        fields_map = {\n            'timestamp': (str(rospy.get_time()), 'timestamp'), 'inferred_mood': ('neutral', 'inferred_mood'),\n            'mood_confidence': (0.0, 'mood_confidence'), 'inferred_intent': ('none', 'inferred_intent'),\n            'intent_confidence': (0.0, 'intent_confidence'), 'user_id': ('unknown', 'user_id')\n        }\n        data = parse_ros_message_data(msg, fields_map, node_name=self.node_name)\n        self.recent_social_cognition_states.append(data)\n        # Direct user commands or high-confidence user intent/distress override other attention priorities\n        if data.get('inferred_intent') in ['command', 'request_help'] and data.get('intent_confidence', 0.0) > 0.7:\n            self._update_cumulative_salience(data.get('intent_confidence', 0.0) * 0.9)\n        elif data.get('inferred_mood') in ['distressed', 'anxious'] and data.get('mood_confidence', 0.0) > 0.7:\n            self._update_cumulative_salience(data.get('mood_confidence', 0.0) * 0.8)\n        rospy.logdebug(f\"{self.node_name}: Received Social Cognition State. Intent: {data.get('inferred_intent', 'N/A')}.\")\n\n    def emotion_state_callback(self, msg):\n        fields_map = {\n            'timestamp': (str(rospy.get_time()), 'timestamp'), 'mood': ('neutral', 'mood'),\n            'sentiment_score': (0.0, 'sentiment_score'), 'mood_intensity': (0.0, 'mood_intensity')\n        }\n        data = parse_ros_message_data(msg, fields_map, node_name=self.node_name)\n        self.recent_emotion_states.append(data)\n        # Strong robot emotions can shift internal attention (e.g., curiosity to exploration, anxiety to self-preservation)\n        if data.get('mood_intensity', 0.0) > 0.6:\n            self._update_cumulative_salience(data.get('mood_intensity', 0.0) * 0.4)\n        rospy.logdebug(f\"{self.node_name}: Received Emotion State. Mood: {data.get('mood', 'N/A')}.\")\n\n    def motivation_state_callback(self, msg):\n        fields_map = {\n            'timestamp': (str(rospy.get_time()), 'timestamp'), 'dominant_goal_id': ('none', 'dominant_goal_id'),\n            'overall_drive_level': (0.0, 'overall_drive_level'), 'active_goals_json': ('{}', 'active_goals_json')\n        }\n        data = parse_ros_message_data(msg, fields_map, node_name=self.node_name)\n        if isinstance(data.get('active_goals_json'), str):\n            try: data['active_goals'] = json.loads(data['active_goals_json'])\n            except json.JSONDecodeError: data['active_goals'] = {}\n        self.recent_motivation_states.append(data)\n        # Current goals strongly direct attention (e.g., if goal is 'navigate_to_X', attend to path planning)\n        if data.get('overall_drive_level', 0.0) > 0.6 and data.get('dominant_goal_id') != 'none':\n            self._update_cumulative_salience(data.get('overall_drive_level', 0.0) * 0.6)\n        rospy.logdebug(f\"{self.node_name}: Received Motivation State. Goal: {data.get('dominant_goal_id', 'N/A')}.\")\n\n    def performance_report_callback(self, msg):\n        fields_map = {\n            'timestamp': (str(rospy.get_time()), 'timestamp'), 'overall_score': (1.0, 'overall_score'),\n            'suboptimal_flag': (False, 'suboptimal_flag'), 'kpis_json': ('{}', 'kpis_json')\n        }\n        data = parse_ros_message_data(msg, fields_map, node_name=self.node_name)\n        if isinstance(data.get('kpis_json'), str):\n            try: data['kpis'] = json.loads(data['kpis_json'])\n            except json.JSONDecodeError: data['kpis'] = {}\n        self.recent_performance_reports.append(data)\n        # Suboptimal performance can trigger attention to self-audit or problem-solving\n        if data.get('suboptimal_flag', False) and data.get('overall_score', 1.0) < 0.7:\n            self._update_cumulative_salience(0.7)\n        rospy.logdebug(f\"{self.node_name}: Received Performance Report. Suboptimal: {data.get('suboptimal_flag', False)}.\")\n\n    def cognitive_directive_callback(self, msg):\n        fields_map = {\n            'timestamp': (str(rospy.get_time()), 'timestamp'), 'directive_type': ('', 'directive_type'),\n            'target_node': ('', 'target_node'), 'command_payload': ('{}', 'command_payload'),\n            'urgency': (0.0, 'urgency'), 'reason': ('', 'reason')\n        }\n        data = parse_ros_message_data(msg, fields_map, node_name=self.node_name)\n        \n        if data.get('target_node') == self.node_name and data.get('directive_type') == 'ShiftAttention':\n            try:\n                payload = json.loads(data.get('command_payload', '{}'))\n                self._update_cumulative_salience(data.get('urgency', 0.0) * 1.0) # Explicit attention directives are highly salient\n                rospy.loginfo(f\"{self.node_name}: Received directive to shift attention to reason: '{data.get('reason', 'N/A')}'.\")\n            except json.JSONDecodeError as e:\n                self._report_error(\"JSON_DECODE_ERROR\", f\"Failed to decode command_payload in CognitiveDirective: {e}\", 0.5, {'payload': data.get('command_payload')})\n            except Exception as e:\n                self._report_error(\"DIRECTIVE_PROCESSING_ERROR\", f\"Error processing CognitiveDirective for attention: {e}\", 0.7, {'directive': data})\n        \n        self.recent_cognitive_directives.append(data) # Store all directives for context\n        rospy.logdebug(f\"{self.node_name}: Cognitive Directive received for context/action.\")\n\n    # --- Core Attention Analysis Logic (Async with LLM) ---\n    async def analyze_attention_async(self, event):\n        \"\"\"\n        Asynchronously analyzes recent cognitive states to determine and update the robot's\n        current attention focus, using LLM for nuanced prioritization.\n        \"\"\"\n        self._prune_history() # Keep context history fresh\n\n        focus_type = self.current_attention_state.get('focus_type', 'idle')\n        focus_target = self.current_attention_state.get('focus_target', 'environment')\n        priority_score = self.current_attention_state.get('priority_score', 0.1)\n        llm_reasoning = \"Not evaluated by LLM.\"\n        \n        if self.cumulative_attention_salience >= self.llm_attention_threshold_salience:\n            rospy.loginfo(f\"{self.node_name}: Triggering LLM for attention analysis (Salience: {self.cumulative_attention_salience:.2f}).\")\n            \n            context_for_llm = self._compile_llm_context_for_attention()\n            llm_attention_output = await self._infer_attention_state_llm(context_for_llm)\n\n            if llm_attention_output:\n                focus_type = llm_attention_output.get('focus_type', focus_type)\n                focus_target = llm_attention_output.get('focus_target', focus_target)\n                priority_score = max(0.0, min(1.0, llm_attention_output.get('priority_score', priority_score)))\n                llm_reasoning = llm_attention_output.get('llm_reasoning', 'LLM provided no specific reasoning.')\n                rospy.loginfo(f\"{self.node_name}: LLM Inferred Attention. Type: '{focus_type}', Target: '{focus_target}' (Priority: {priority_score:.2f}).\")\n            else:\n                rospy.logwarn(f\"{self.node_name}: LLM attention analysis failed. Applying simple fallback.\")\n                focus_type, focus_target, priority_score = self._apply_simple_attention_rules()\n                llm_reasoning = \"Fallback to simple rules due to LLM failure.\"\n        else:\n            rospy.logdebug(f\"{self.node_name}: Insufficient cumulative salience ({self.cumulative_attention_salience:.2f}) for LLM attention analysis. Applying simple rules.\")\n            focus_type, focus_target, priority_score = self._apply_simple_attention_rules()\n            llm_reasoning = \"Fallback to simple rules due to low salience.\"\n\n        self.current_attention_state = {\n            'timestamp': str(rospy.get_time()),\n            'focus_type': focus_type,\n            'focus_target': focus_target,\n            'priority_score': priority_score\n        }\n\n        self.save_attention_log(\n            id=str(uuid.uuid4()),\n            timestamp=self.current_attention_state['timestamp'],\n            focus_type=self.current_attention_state['focus_type'],\n            focus_target=self.current_attention_state['focus_target'],\n            priority_score=self.current_attention_state['priority_score'],\n            llm_reasoning=llm_reasoning,\n            context_snapshot_json=json.dumps(self._compile_llm_context_for_attention())\n        )\n        self.publish_attention_state(None) # Publish updated state\n        self.cumulative_attention_salience = 0.0 # Reset after analysis\n\n    async def _infer_attention_state_llm(self, context_for_llm):\n        \"\"\"\n        Uses the LLM to infer the robot's current attention state, including\n        focus type, focus target, and priority score.\n        \"\"\"\n        prompt_text = f\"\"\"\n        You are the Attention Module of a robot's cognitive architecture, powered by a large language model. Your role is to determine the robot's current `focus_type`, `focus_target`, and `priority_score` by synthesizing inputs from various cognitive modules. This module governs what information the robot prioritizes for processing and action.\n\n        Robot's Recent Cognitive Context (for Attention Inference):\n        --- Cognitive Context ---\n        {json.dumps(context_for_llm, indent=2)}\n\n        Based on this context, provide:\n        1.  `focus_type`: string (The category of what the robot is attending to, e.g., 'sensory_event', 'user_interaction', 'internal_reflection', 'goal_driven', 'problem_solving', 'self_audit', 'idle').\n        2.  `focus_target`: string (The specific entity, concept, or area the robot's attention is directed at, e.g., 'human_user', 'obstacle_X', 'battery_level', 'current_task_progress', 'memory_retrieval', 'environment').\n        3.  `priority_score`: number (0.0 to 1.0, indicating the urgency or importance of this attention focus. 1.0 is highest priority.)\n        4.  `llm_reasoning`: string (Detailed explanation for your attention shift decision, referencing specific contextual inputs that influenced the focus and its priority.)\n\n        Consider:\n        -   **Cognitive Directives**: Are there explicit directives like 'ShiftAttention' to a specific target or type? These are paramount.\n        -   **Sensory Qualia**: Are there highly `salience_score` events with urgent `description_summary`? (e.g., \"loud bang\", \"obstacle detected\").\n        -   **Social Cognition States**: Is the user showing `distressed` `inferred_mood` or giving a direct `command` via `inferred_intent`?\n        -   **Emotion States**: Is the robot feeling intense `curiosity` (focus on exploration), `anxiety` (focus on safety/threats), or `frustration` (focus on problem)?\n        -   **Motivation States**: What is the `dominant_goal_id` and `overall_drive_level`? Attention should align with achieving this goal.\n        -   **Performance Reports**: Is `suboptimal_flag` true? Attention might shift to self-audit or problem-solving.\n\n        Your response must be in JSON format, containing:\n        1.  'timestamp': string (current ROS time)\n        2.  'focus_type': string\n        3.  'focus_target': string\n        4.  'priority_score': number\n        5.  'llm_reasoning': string\n        \"\"\"\n        response_schema = {\n            \"type\": \"object\",\n            \"properties\": {\n                \"timestamp\": {\"type\": \"string\"},\n                \"focus_type\": {\"type\": \"string\"},\n                \"focus_target\": {\"type\": \"string\"},\n                \"priority_score\": {\"type\": \"number\", \"minimum\": 0.0, \"maximum\": 1.0},\n                \"llm_reasoning\": {\"type\": \"string\"}\n            },\n            \"required\": [\"timestamp\", \"focus_type\", \"focus_target\", \"priority_score\", \"llm_reasoning\"]\n        }\n\n        llm_output_str = await self._call_llm_api(prompt_text, response_schema, temperature=0.3, max_tokens=250)\n\n        if not llm_output_str.startswith(\"Error:\"):\n            try:\n                llm_data = json.loads(llm_output_str)\n                # Ensure numerical fields are floats\n                if 'priority_score' in llm_data: llm_data['priority_score'] = float(llm_data['priority_score'])\n                return llm_data\n            except json.JSONDecodeError as e:\n                self._report_error(\"LLM_PARSE_ERROR\", f\"Failed to parse LLM response for attention: {e}. Raw: {llm_output_str}\", 0.8)\n                return None\n        else:\n            self._report_error(\"LLM_ATTENTION_ANALYSIS_FAILED\", f\"LLM call failed for attention analysis: {llm_output_str}\", 0.9)\n            return None\n\n    def _apply_simple_attention_rules(self):\n        \"\"\"\n        Fallback mechanism to infer attention state using simple rule-based logic\n        if LLM is not triggered or fails.\n        \"\"\"\n        current_time = rospy.get_time()\n        \n        focus_type = \"idle\"\n        focus_target = \"environment\"\n        priority_score = 0.1\n\n        # Rule 1: Prioritize explicit directives to shift attention\n        for directive in reversed(self.recent_cognitive_directives):\n            time_since_directive = current_time - float(directive.get('timestamp', 0.0))\n            if time_since_directive < 1.0 and directive.get('target_node') == self.node_name and \\\n               directive.get('directive_type') == 'ShiftAttention':\n                payload = json.loads(directive.get('command_payload', '{}'))\n                focus_type = payload.get('focus_type', 'directive_driven')\n                focus_target = payload.get('focus_target', 'unspecified_directive_target')\n                priority_score = max(0.8, directive.get('urgency', 0.0)) # High priority for direct commands\n                rospy.logdebug(f\"{self.node_name}: Simple rule: Direct attention shift from directive: {focus_target}.\")\n                return focus_type, focus_target, priority_score\n\n        # Rule 2: Prioritize urgent sensory events\n        if self.recent_sensory_qualia:\n            latest_qualia = self.recent_sensory_qualia[-1]\n            time_since_qualia = current_time - float(latest_qualia.get('timestamp', 0.0))\n            if time_since_qualia < 0.2 and latest_qualia.get('salience_score', 0.0) > 0.8:\n                focus_type = \"sensory_event\"\n                focus_target = f\"{latest_qualia.get('modality', 'unknown')}_salient_event\"\n                priority_score = latest_qualia.get('salience_score', 0.0)\n                rospy.logdebug(f\"{self.node_name}: Simple rule: Attention to salient sensory event.\")\n                return focus_type, focus_target, priority_score\n\n        # Rule 3: Prioritize user interaction if a clear intent is detected\n        if self.recent_social_cognition_states:\n            latest_social = self.recent_social_cognition_states[-1]\n            time_since_social = current_time - float(latest_social.get('timestamp', 0.0))\n            if time_since_social < 0.5 and latest_social.get('inferred_intent') != 'none' and latest_social.get('intent_confidence', 0.0) > 0.6:\n                focus_type = \"user_interaction\"\n                focus_target = f\"user_{latest_social.get('user_id', 'unknown')}_{latest_social.get('inferred_intent', 'N/A')}\"\n                priority_score = latest_social.get('intent_confidence', 0.0) * 0.8\n                rospy.logdebug(f\"{self.node_name}: Simple rule: Attention to user intent.\")\n                return focus_type, focus_target, priority_score\n        \n        # Rule 4: Prioritize current dominant goal if active\n        if self.recent_motivation_states:\n            latest_motivation = self.recent_motivation_states[-1]\n            time_since_motivation = current_time - float(latest_motivation.get('timestamp', 0.0))\n            if time_since_motivation < 1.0 and latest_motivation.get('dominant_goal_id') != 'none' and latest_motivation.get('overall_drive_level', 0.0) > 0.5:\n                focus_type = \"goal_driven\"\n                focus_target = latest_motivation.get('dominant_goal_id')\n                priority_score = latest_motivation.get('overall_drive_level', 0.0) * 0.7\n                rospy.logdebug(f\"{self.node_name}: Simple rule: Attention to dominant goal.\")\n                return focus_type, focus_target, priority_score\n\n        rospy.logdebug(f\"{self.node_name}: Simple rule: Defaulting to idle environmental attention.\")\n        return focus_type, focus_target, priority_score\n\n\n    def _compile_llm_context_for_attention(self):\n        \"\"\"\n        Gathers and formats all relevant cognitive state data for the LLM's\n        attention inference.\n        \"\"\"\n        context = {\n            \"current_time\": rospy.get_time(),\n            \"current_attention_state\": self.current_attention_state,\n            \"recent_cognitive_inputs\": {\n                \"sensory_qualia\": list(self.recent_sensory_qualia),\n                \"social_cognition_states\": list(self.recent_social_cognition_states),\n                \"emotion_states\": list(self.recent_emotion_states),\n                \"motivation_states\": list(self.recent_motivation_states),\n                \"performance_reports\": list(self.recent_performance_reports),\n                \"cognitive_directives_for_self\": [d for d in self.recent_cognitive_directives if d.get('target_node') == self.node_name]\n            }\n        }\n        \n        # Deep parse any nested JSON strings in context for better LLM understanding\n        for category_key in context[\"recent_cognitive_inputs\"]:\n            for i, item in enumerate(context[\"recent_cognitive_inputs\"][category_key]):\n                if isinstance(item, dict):\n                    for field, value in item.items():\n                        if isinstance(value, str) and field.endswith('_json'):\n                            try:\n                                item[field] = json.loads(value)\n                            except json.JSONDecodeError:\n                                pass # Keep as string if not valid JSON\n\n        return context\n\n    # --- Database and Publishing Functions ---\n    def save_attention_log(self, id, timestamp, focus_type, focus_target, priority_score, llm_reasoning, context_snapshot_json):\n        \"\"\"Saves an attention state entry to the SQLite database.\"\"\"\n        try:\n            self.cursor.execute('''\n                INSERT INTO attention_log (id, timestamp, focus_type, focus_target, priority_score, llm_reasoning, context_snapshot_json)\n                VALUES (?, ?, ?, ?, ?, ?, ?)\n            ''', (id, timestamp, focus_type, focus_target, priority_score, llm_reasoning, context_snapshot_json))\n            self.conn.commit()\n            rospy.logdebug(f\"{self.node_name}: Saved attention log (ID: {id}, Target: {focus_target}).\")\n        except sqlite3.Error as e:\n            self._report_error(\"DB_SAVE_ERROR\", f\"Failed to save attention log: {e}\", 0.9)\n        except Exception as e:\n            self._report_error(\"UNEXPECTED_SAVE_ERROR\", f\"Unexpected error in save_attention_log: {e}\", 0.9)\n\n\n    def publish_attention_state(self, event):\n        \"\"\"Publishes the robot's current attention state.\"\"\"\n        timestamp = str(rospy.get_time())\n        # Update timestamp before publishing\n        self.current_attention_state['timestamp'] = timestamp\n        \n        try:\n            if isinstance(AttentionState, type(String)): # Fallback to String message\n                self.pub_attention_state.publish(json.dumps(self.current_attention_state))\n            else:\n                attention_msg = AttentionState()\n                attention_msg.timestamp = timestamp\n                attention_msg.focus_type = self.current_attention_state['focus_type']\n                attention_msg.focus_target = self.current_attention_state['focus_target']\n                attention_msg.priority_score = self.current_attention_state['priority_score']\n                self.pub_attention_state.publish(attention_msg)\n\n            rospy.logdebug(f\"{self.node_name}: Published Attention State. Target: '{self.current_attention_state['focus_target']}', Score: '{self.current_attention_state['priority_score']}'.\")\n\n        except Exception as e:\n            self._report_error(\"PUBLISH_ATTENTION_STATE_ERROR\", f\"Failed to publish attention state: {e}\", 0.7)\n\n    def publish_cognitive_directive(self, directive_type, target_node, command_payload, urgency, reason=\"\"):\n        \"\"\"Helper to publish a CognitiveDirective message.\"\"\"\n        timestamp = str(rospy.get_time())\n        try:\n            if isinstance(CognitiveDirective, type(String)): # Fallback to String message\n                directive_data = {\n                    'timestamp': timestamp,\n                    'directive_type': directive_type,\n                    'target_node': target_node,\n                    'command_payload': command_payload, # Already JSON string\n                    'urgency': urgency,\n                    'reason': reason\n                }\n                self.pub_cognitive_directive.publish(json.dumps(directive_data))\n            else:\n                directive_msg = CognitiveDirective()\n                directive_msg.timestamp = timestamp\n                directive_msg.directive_type = directive_type\n                directive_msg.target_node = target_node\n                directive_msg.command_payload = command_payload\n                directive_msg.urgency = urgency\n                directive_msg.reason = reason\n                self.pub_cognitive_directive.publish(directive_msg)\n            rospy.logdebug(f\"{self.node_name}: Issued Cognitive Directive '{directive_type}' to '{target_node}'.\")\n        except Exception as e:\n            rospy.logerr(f\"{self.node_name}: Failed to issue cognitive directive from Attention Node: {e}\")\n\n\n    def run(self):\n        \"\"\"Starts the ROS node and keeps it spinning.\"\"\"\n        rospy.spin()\n\n    def __del__(self):\n        \"\"\"Ensures the database connection is closed on node shutdown and async loop is stopped.\"\"\"\n        rospy.loginfo(f\"{self.node_name} shutting down. Closing database connection and asyncio loop.\")\n        if hasattr(self, 'conn') and self.conn:\n            self.conn.close()\n        self._shutdown_async_loop()\n\nif __name__ == '__main__':\n    try:\n        node = AttentionNode()\n        node.run()\n    except rospy.ROSInterruptException:\n        rospy.loginfo(f\"{rospy.get_name()} interrupted by ROS shutdown.\")\n        if 'node' in locals() and isinstance(node, AttentionNode):\n            node._shutdown_async_loop()\n            if hasattr(node, 'conn'): node.conn.close()\n    except Exception as e:\n        rospy.logerr(f\"{rospy.get_name()} encountered an unexpected error: {e}\")\n        if 'node' in locals() and isinstance(node, AttentionNode):\n            node._shutdown_async_loop()\n            if hasattr(node, 'conn'): node.conn.close()","outputs":[],"execution_count":null,"metadata":{}}],"metadata":{"colab":{"from_bard":true},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}