{"cells":[{"cell_type":"code","source":"#!/usr/bin/env python3\nimport rospy\nimport json\nimport time\nimport random\nimport uuid # For unique message IDs\n\nfrom std_msgs.msg import String\n\n# Updated imports for custom messages (if they are defined in sentience.msg)\ntry:\n    from sentience.msg import (\n        SensoryQualia,          # Output: Processed sensory data\n        InteractionRequest      # Output: Simulated user input\n    )\nexcept ImportError:\n    rospy.logwarn(\"Custom ROS messages for 'sentience' package not found. Using String for all outgoing data in Mock Sensors.\")\n    SensoryQualia = String\n    InteractionRequest = String\n    String = String # Ensure String is defined even if other custom messages aren't\n\n# --- Import shared utility functions (for config loading) ---\n# Assuming 'sentience/scripts/utils.py' exists and contains load_config\n# If not, you might need to manually define parameters here or create the file.\ntry:\n    from sentience.scripts.utils import load_config\nexcept ImportError:\n    rospy.logwarn(\"Could not import sentience.scripts.utils.load_config. Using default parameters for Mock Sensors.\")\n    def load_config(node_name, config_path):\n        rospy.logwarn(f\"Mocking load_config for {node_name}. Using hardcoded defaults.\")\n        return {\n            'db_root_path': '/tmp/sentience_db',\n            'default_log_level': 'INFO',\n            'mock_sensors': {\n                'publish_interval_sensory_qualia': 1.0,\n                'publish_interval_interaction_request': 3.0,\n                'simulated_sensory_events': [\n                    {\"type\": \"visual\", \"description\": \"a person walking by\", \"salience\": 0.6},\n                    {\"type\": \"auditory\", \"description\": \"a knock on the door\", \"salience\": 0.8},\n                    {\"type\": \"tactile\", \"description\": \"robot's arm brushes against a surface\", \"salience\": 0.3},\n                    {\"type\": \"visual\", \"description\": \"a bright red object\", \"salience\": 0.7},\n                    {\"type\": \"auditory\", \"description\": \"a human voice speaking\", \"salience\": 0.9}\n                ],\n                'simulated_user_inputs': [\n                    {\"type\": \"speech_text\", \"text\": \"Hello robot, how are you?\", \"urgency\": 0.5},\n                    {\"type\": \"speech_text\", \"text\": \"Can you fetch me the book?\", \"urgency\": 0.8, \"command_payload\": {\"action\": \"fetch\", \"object\": \"book\"}},\n                    {\"type\": \"gesture\", \"text\": \"points to a direction\", \"urgency\": 0.4, \"gesture_data\": {\"direction\": \"forward\"}},\n                    {\"type\": \"speech_text\", \"text\": \"That's wrong, try again!\", \"urgency\": 0.9, \"command_payload\": {\"feedback\": \"negative\"}},\n                    {\"type\": \"speech_text\", \"text\": \"Thank you, that was helpful.\", \"urgency\": 0.3, \"command_payload\": {\"feedback\": \"positive\"}}\n                ]\n            }\n        }\n\n\nclass MockSensors:\n    def __init__(self):\n        rospy.init_node('mock_sensors', anonymous=False)\n        self.node_name = rospy.get_name()\n\n        # --- Load parameters from centralized config ---\n        config_file_path = rospy.get_param('~config_file_path', None)\n        if config_file_path is None:\n            rospy.logwarn(f\"{self.node_name}: 'config_file_path' parameter is not set. Using default parameters for mock sensors.\")\n            self.params = load_config(self.node_name.strip('/'), \"default_config_path_ignored\") # Pass a dummy path\n        else:\n            self.params = load_config(self.node_name.strip('/'), config_file_path)\n            if not self.params:\n                rospy.logfatal(f\"{self.node_name}: Failed to load configuration from '{config_file_path}'. Shutting down.\")\n                rospy.signal_shutdown(\"Configuration loading failed.\")\n                return\n\n        # Assign parameters from 'mock_sensors' section of config\n        self.mock_sensor_params = self.params.get('mock_sensors', {})\n        self.sensory_qualia_interval = self.mock_sensor_params.get('publish_interval_sensory_qualia', 1.0)\n        self.interaction_request_interval = self.mock_sensor_params.get('publish_interval_interaction_request', 3.0)\n        self.simulated_sensory_events = self.mock_sensor_params.get('simulated_sensory_events', [])\n        self.simulated_user_inputs = self.mock_sensor_params.get('simulated_user_inputs', [])\n\n        # Set ROS log level from config\n        rospy.set_param('/rosout/log_level', self.params.get('default_log_level', 'INFO').upper())\n\n\n        # --- Publishers ---\n        self.pub_sensory_qualia = rospy.Publisher('/sensory_qualia', SensoryQualia, queue_size=10)\n        self.pub_interaction_request = rospy.Publisher('/interaction_request', InteractionRequest, queue_size=10)\n        self.pub_error_report = rospy.Publisher('/error_monitor/report', String, queue_size=10)\n\n\n        # --- Timers for periodic publishing ---\n        rospy.Timer(rospy.Duration(self.sensory_qualia_interval), self.publish_sensory_qualia)\n        rospy.Timer(rospy.Duration(self.interaction_request_interval), self.publish_interaction_request)\n\n        rospy.loginfo(f\"{self.node_name}: Mock Sensor system online, simulating inputs.\")\n\n    # --- Error Reporting Utility ---\n    def _report_error(self, error_type, description, severity=0.5, context=None):\n        timestamp = str(rospy.get_time())\n        error_msg_data = {\n            'timestamp': timestamp, 'source_node': self.node_name, 'error_type': error_type,\n            'description': description, 'severity': severity, 'context': context if context else {}\n        }\n        try:\n            self.pub_error_report.publish(json.dumps(error_msg_data))\n            rospy.logerr(f\"{self.node_name}: REPORTED ERROR: {error_type} - {description}\")\n        except Exception as e:\n            rospy.logerr(f\"{self.node_name}: Failed to publish error report: {e}\")\n\n    def publish_sensory_qualia(self, event):\n        \"\"\"Publishes a simulated SensoryQualia message.\"\"\"\n        if not self.simulated_sensory_events:\n            rospy.logdebug(f\"{self.node_name}: No simulated sensory events configured. Skipping SensoryQualia.\")\n            return\n\n        # Pick a random sensory event from the predefined list\n        simulated_event = random.choice(self.simulated_sensory_events)\n        \n        timestamp = str(rospy.get_time())\n        qualia_id = str(uuid.uuid4()) # Unique ID for each qualia event\n        qualia_type = simulated_event.get('type', 'generic')\n        modality = simulated_event.get('modality', 'unknown') # e.g., 'visual', 'auditory', 'tactile'\n        description_summary = simulated_event.get('description', 'simulated event')\n        salience_score = simulated_event.get('salience', 0.5)\n        raw_data_hash = str(random.getrandbits(128)) # Simulate a hash for raw data\n\n        try:\n            if isinstance(SensoryQualia, type(String)): # Fallback to String message\n                qualia_data = {\n                    'timestamp': timestamp,\n                    'qualia_id': qualia_id,\n                    'qualia_type': qualia_type,\n                    'modality': modality,\n                    'description_summary': description_summary,\n                    'salience_score': salience_score,\n                    'raw_data_hash': raw_data_hash\n                }\n                self.pub_sensory_qualia.publish(json.dumps(qualia_data))\n            else:\n                qualia_msg = SensoryQualia()\n                qualia_msg.timestamp = timestamp\n                qualia_msg.qualia_id = qualia_id\n                qualia_msg.qualia_type = qualia_type\n                qualia_msg.modality = modality\n                qualia_msg.description_summary = description_summary\n                qualia_msg.salience_score = salience_score\n                qualia_msg.raw_data_hash = raw_data_hash\n                self.pub_sensory_qualia.publish(qualia_msg)\n\n            rospy.logdebug(f\"{self.node_name}: Published Sensory Qualia: {description_summary} ({modality}).\")\n\n        except Exception as e:\n            self._report_error(\"PUBLISH_SENSORY_QUALIA_ERROR\", f\"Failed to publish sensory qualia: {e}\", 0.7)\n\n    def publish_interaction_request(self, event):\n        \"\"\"Publishes a simulated InteractionRequest message.\"\"\"\n        if not self.simulated_user_inputs:\n            rospy.logdebug(f\"{self.node_name}: No simulated user inputs configured. Skipping InteractionRequest.\")\n            return\n\n        # Pick a random user input from the predefined list\n        simulated_input = random.choice(self.simulated_user_inputs)\n\n        timestamp = str(rospy.get_time())\n        request_id = str(uuid.uuid4()) # Unique ID for each request\n        request_type = simulated_input.get('type', 'speech_text') # e.g., 'speech_text', 'gesture', 'command'\n        user_id = simulated_input.get('user_id', 'simulated_user_1')\n        command_payload = json.dumps(simulated_input.get('command_payload', {})) # Ensure it's a JSON string\n        urgency_score = simulated_input.get('urgency', 0.5)\n        speech_text = simulated_input.get('text', '')\n        gesture_data_json = json.dumps(simulated_input.get('gesture_data', {})) # Ensure it's a JSON string\n\n        try:\n            if isinstance(InteractionRequest, type(String)): # Fallback to String message\n                request_data = {\n                    'timestamp': timestamp,\n                    'request_id': request_id,\n                    'request_type': request_type,\n                    'user_id': user_id,\n                    'command_payload': command_payload,\n                    'urgency_score': urgency_score,\n                    'speech_text': speech_text,\n                    'gesture_data_json': gesture_data_json\n                }\n                self.pub_interaction_request.publish(json.dumps(request_data))\n            else:\n                request_msg = InteractionRequest()\n                request_msg.timestamp = timestamp\n                request_msg.request_id = request_id\n                request_msg.request_type = request_type\n                request_msg.user_id = user_id\n                request_msg.command_payload = command_payload\n                request_msg.urgency_score = urgency_score\n                request_msg.speech_text = speech_text\n                request_msg.gesture_data_json = gesture_data_json\n                self.pub_interaction_request.publish(request_msg)\n            \n            rospy.logdebug(f\"{self.node_name}: Published Interaction Request: '{speech_text}' (Type: {request_type}).\")\n\n        except Exception as e:\n            self._report_error(\"PUBLISH_INTERACTION_REQUEST_ERROR\", f\"Failed to publish interaction request: {e}\", 0.7)\n\n\n    def run(self):\n        \"\"\"Starts the ROS node and keeps it spinning.\"\"\"\n        rospy.spin()\n\nif __name__ == '__main__':\n    try:\n        mock_sensors = MockSensors()\n        mock_sensors.run()\n    except rospy.ROSInterruptException:\n        rospy.loginfo(f\"{rospy.get_name()} interrupted by ROS shutdown.\")\n    except Exception as e:\n        rospy.logerr(f\"{rospy.get_name()} encountered an unexpected error: {e}\")","outputs":[],"execution_count":null,"metadata":{}}],"metadata":{"colab":{"from_bard":true},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}