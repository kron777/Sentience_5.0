{"cells":[{"cell_type":"code","source":"#!/usr/bin/env python3\nimport rospy\nimport sqlite3\nimport os\nimport json\nimport time\nimport random\nimport uuid # For unique report IDs\n\n# --- Asyncio Imports for LLM calls ---\nimport asyncio\nimport aiohttp\nimport threading\nfrom collections import deque\n\nfrom std_msgs.msg import String\n\n# Updated imports for custom messages:\ntry:\n    from sentience.msg import (\n        PerformanceReport,      # Output: Overall system performance metrics\n        SystemMetric,           # Input: Raw system metrics from various nodes\n        CognitiveDirective,     # Input: Directives for performance audit/optimization goals\n        MotivationState,        # Input: Current goals (for goal-oriented performance)\n        WorldModelState         # Input: Environmental complexity (context for performance)\n    )\nexcept ImportError:\n    rospy.logwarn(\"Custom ROS messages for 'sentience' package not found. Using String for all incoming/outgoing data for fallback in Performance Metrics Node.\")\n    PerformanceReport = String\n    SystemMetric = String\n    CognitiveDirective = String\n    MotivationState = String\n    WorldModelState = String\n    String = String # Ensure String is defined even if other custom messages aren't\n\n# --- Import shared utility functions ---\n# Assuming 'sentience/scripts/utils.py' exists and contains parse_ros_message_data and load_config\ntry:\n    from sentience.scripts.utils import parse_ros_message_data, load_config\nexcept ImportError:\n    rospy.logwarn(\"Could not import sentience.scripts.utils. Using fallback for parse_ros_message_data and load_config.\")\n    # Fallback implementations if the utility file isn't available\n    def parse_ros_message_data(msg, fields_map, node_name=\"unknown_node\"):\n        \"\"\"\n        Fallback parser for ROS messages, assuming String message and JSON content.\n        If msg is not String, it attempts to access attributes directly.\n        \"\"\"\n        data = {}\n        if isinstance(msg, String):\n            try:\n                parsed_json = json.loads(msg.data)\n                for key_in_msg, (default_val, target_key) in fields_map.items():\n                    data[target_key] = parsed_json.get(key_in_msg, default_val)\n            except json.JSONDecodeError:\n                rospy.logerr(f\"{node_name}: Could not parse String message data as JSON: {msg.data}\")\n                for key_in_msg, (default_val, target_key) in fields_map.items():\n                    data[target_key] = default_val # Use defaults on JSON error\n        else:\n            # Attempt to get attributes directly from the message object\n            for key_in_msg, (default_val, target_key) in fields_map.items():\n                data[target_key] = getattr(msg, key_in_msg, default_val)\n        return data\n\n    def load_config(node_name, config_path):\n        \"\"\"\n        Fallback config loader: returns hardcoded defaults.\n        In a real scenario, this should load from a YAML file.\n        \"\"\"\n        rospy.logwarn(f\"{node_name}: Using hardcoded default configuration as '{config_path}' could not be loaded.\")\n        return {\n            'db_root_path': '/tmp/sentience_db',\n            'default_log_level': 'INFO',\n            'performance_metrics_node': {\n                'report_interval': 1.0, # How often to generate a performance report\n                'llm_analysis_threshold_salience': 0.6, # Cumulative salience to trigger LLM\n                'recent_context_window_s': 15.0 # Window for deques for LLM context\n            },\n            'llm_params': { # Global LLM parameters for fallback\n                'model_name': \"phi-2\",\n                'base_url': \"http://localhost:8000/v1/chat/completions\",\n                'timeout_seconds': 30.0\n            }\n        }.get(node_name, {}) # Return node-specific or empty dict\n\n\nclass PerformanceMetricsNode:\n    def __init__(self):\n        rospy.init_node('performance_metrics_node', anonymous=False)\n        self.node_name = rospy.get_name()\n\n        # --- Load parameters from centralized config ---\n        config_file_path = rospy.get_param('~config_file_path', None)\n        if config_file_path is None:\n            rospy.logfatal(f\"{self.node_name}: 'config_file_path' parameter is not set. Cannot load configuration. Shutting down.\")\n            rospy.signal_shutdown(\"Missing config_file_path parameter.\")\n            return\n\n        full_config = load_config(\"global\", config_file_path) # Load global params\n        self.params = load_config(self.node_name.strip('/'), config_file_path) # Load node-specific params\n\n        if not self.params or not full_config:\n            rospy.logfatal(f\"{self.node_name}: Failed to load configuration from '{config_file_path}'. Shutting down.\")\n            rospy.signal_shutdown(\"Configuration loading failed.\")\n            return\n\n        # Assign parameters\n        self.db_path = os.path.join(full_config.get('db_root_path', '/tmp/sentience_db'), \"performance_log.db\")\n        self.report_interval = self.params.get('report_interval', 1.0) # How often to generate a report\n        self.llm_analysis_threshold_salience = self.params.get('llm_analysis_threshold_salience', 0.6) # Salience to trigger LLM\n        self.recent_context_window_s = self.params.get('recent_context_window_s', 15.0) # Context window for LLM\n\n        # LLM Parameters (from global config)\n        self.llm_model_name = full_config.get('llm_params', {}).get('model_name', \"phi-2\")\n        self.llm_base_url = full_config.get('llm_params', {}).get('base_url', \"http://localhost:8000/v1/chat/completions\")\n        self.llm_timeout = full_config.get('llm_params', {}).get('timeout_seconds', 30.0) # Timeout for LLM calls\n\n        # Set ROS log level from config\n        rospy.set_param('/rosout/log_level', full_config.get('default_log_level', 'INFO').upper())\n\n\n        # --- Asyncio Setup ---\n        self._async_loop = asyncio.new_event_loop()\n        self._async_thread = threading.Thread(target=self._run_async_loop, daemon=True)\n        self._async_thread.start()\n        self._async_session = None\n        self.active_llm_task = None # To track the currently running LLM task\n\n        # --- Initialize SQLite database ---\n        os.makedirs(os.path.dirname(self.db_path), exist_ok=True)\n        self.conn = sqlite3.connect(self.db_path, check_same_thread=False)\n        self.cursor = self.conn.cursor()\n\n        # Create the 'performance_log' table if it doesn't exist.\n        # NEW: Added 'llm_analysis_reasoning', 'context_snapshot_json'\n        self.cursor.execute('''\n            CREATE TABLE IF NOT EXISTS performance_log (\n                id TEXT PRIMARY KEY,            -- Unique report ID (UUID)\n                timestamp TEXT,\n                overall_score REAL,             -- Aggregated performance score (0.0 to 1.0)\n                suboptimal_flag BOOLEAN,        -- True if performance is below acceptable thresholds\n                kpis_json TEXT,                 -- JSON of detailed Key Performance Indicators\n                llm_analysis_reasoning TEXT,    -- NEW: LLM's detailed reasoning for performance assessment\n                context_snapshot_json TEXT      -- NEW: JSON of relevant cognitive context at time of report\n            )\n        ''')\n        self.cursor.execute('CREATE INDEX IF NOT EXISTS idx_performance_timestamp ON performance_log (timestamp)')\n        self.conn.commit() # Commit schema changes\n\n        # --- Internal State ---\n        self.current_performance_report = {\n            'timestamp': str(rospy.get_time()),\n            'overall_score': 1.0,\n            'suboptimal_flag': False,\n            'kpis': {\n                'task_completion_rate': 1.0,\n                'latency_avg_ms': 50,\n                'resource_utilization_avg_percent': 0.2,\n                'error_rate': 0.0\n            }\n        }\n\n        # Deques to maintain a short history of inputs for performance analysis\n        self.recent_system_metrics = deque(maxlen=20) # More granular data needed for performance\n        self.recent_cognitive_directives = deque(maxlen=5) # Directives for performance audit\n        self.recent_motivation_states = deque(maxlen=5) # For goal-oriented performance assessment\n        self.recent_world_model_states = deque(maxlen=5) # Environmental complexity context\n\n        self.cumulative_performance_salience = 0.0 # Aggregated salience to trigger LLM analysis\n\n        # --- Publishers ---\n        self.pub_performance_report = rospy.Publisher('/performance_report', PerformanceReport, queue_size=10)\n        self.pub_error_report = rospy.Publisher('/error_monitor/report', String, queue_size=10)\n        self.pub_cognitive_directive = rospy.Publisher('/cognitive_directives', CognitiveDirective, queue_size=10) # To request optimization or data mining\n\n\n        # --- Subscribers ---\n        rospy.Subscriber('/system_metrics', SystemMetric, self.system_metric_callback)\n        rospy.Subscriber('/cognitive_directives', CognitiveDirective, self.cognitive_directive_callback)\n        rospy.Subscriber('/motivation_state', String, self.motivation_state_callback) # Stringified JSON\n        rospy.Subscriber('/world_model_state', String, self.world_model_state_callback) # Stringified JSON\n\n\n        # --- Timer for periodic performance reporting ---\n        rospy.Timer(rospy.Duration(self.report_interval), self._run_performance_analysis_wrapper)\n\n        rospy.loginfo(f\"{self.node_name}: Robot's performance metrics system online.\")\n        # Publish initial report\n        self.publish_performance_report(None)\n\n    # --- Asyncio Thread Management ---\n    def _run_async_loop(self):\n        asyncio.set_event_loop(self._async_loop)\n        self._async_loop.run_until_complete(self._create_async_session())\n        self._async_loop.run_forever()\n\n    async def _create_async_session(self):\n        rospy.loginfo(f\"{self.node_name}: Creating aiohttp ClientSession...\")\n        self._async_session = aiohttp.ClientSession()\n        rospy.loginfo(f\"{self.node_name}: aiohttp ClientSession created.\")\n\n    async def _close_async_session(self):\n        if self._async_session:\n            rospy.loginfo(f\"{self.node_name}: Closing aiohttp ClientSession...\")\n            await self._async_session.close()\n            self._async_session = None\n            rospy.loginfo(f\"{self.node_name}: aiohttp ClientSession closed.\")\n\n    def _shutdown_async_loop(self):\n        if self._async_loop and self._async_thread.is_alive():\n            rospy.loginfo(f\"{self.node_name}: Shutting down asyncio loop...\")\n            future = asyncio.run_coroutine_threadsafe(self._close_async_session(), self._async_loop)\n            try:\n                future.result(timeout=5.0)\n            except asyncio.TimeoutError:\n                rospy.logwarn(f\"{self.node_name}: Timeout waiting for async session to close.\")\n            self._async_loop.call_soon_threadsafe(self._async_loop.stop)\n            self._async_thread.join(timeout=5.0)\n            if self._async_thread.is_alive():\n                rospy.logwarn(f\"{self.node_name}: Asyncio thread did not shut down gracefully.\")\n            rospy.loginfo(f\"{self.node_name}: Asyncio loop shut down.\")\n\n    def _run_performance_analysis_wrapper(self, event):\n        \"\"\"Wrapper to run the async performance analysis from a ROS timer.\"\"\"\n        if self.active_llm_task and not self.active_llm_task.done():\n            rospy.logdebug(f\"{self.node_name}: LLM performance analysis task already active. Skipping new cycle.\")\n            return\n        \n        # Schedule the async task\n        self.active_llm_task = asyncio.run_coroutine_threadsafe(\n            self.analyze_performance_async(event), self._async_loop\n        )\n\n    # --- Error Reporting Utility ---\n    def _report_error(self, error_type, description, severity=0.5, context=None):\n        timestamp = str(rospy.get_time())\n        error_msg_data = {\n            'timestamp': timestamp, 'source_node': self.node_name, 'error_type': error_type,\n            'description': description, 'severity': severity, 'context': context if context else {}\n        }\n        try:\n            self.pub_error_report.publish(json.dumps(error_msg_data))\n            rospy.logerr(f\"{self.node_name}: REPORTED ERROR: {error_type} - {description}\")\n        except Exception as e:\n            rospy.logerr(f\"{self.node_name}: Failed to publish error report: {e}\")\n\n    # --- LLM Call Function (ADAPTED FOR LOCAL PHI-2 SERVER) ---\n    async def _call_llm_api(self, prompt_text, response_schema=None, temperature=0.1, max_tokens=300):\n        \"\"\"\n        Asynchronously calls the local LLM inference server (e.g., llama.cpp compatible API).\n        Can optionally request a structured JSON response. Low temperature for factual analysis.\n        \"\"\"\n        if not self._async_session:\n            await self._create_async_session() # Attempt to create if not exists\n            if not self._async_session:\n                self._report_error(\"LLM_SESSION_ERROR\", \"aiohttp session not available for LLM call.\", 0.8)\n                return \"Error: LLM session not ready.\"\n\n        payload = {\n            \"model\": self.llm_model_name,\n            \"messages\": [{\"role\": \"user\", \"content\": prompt_text}],\n            \"temperature\": temperature, # Low temperature for factual analysis\n            \"max_tokens\": max_tokens,\n            \"stream\": False\n        }\n        headers = {'Content-Type': 'application/json'}\n\n        if response_schema:\n            prompt_text += \"\\n\\nProvide the response in JSON format according to this schema:\\n\" + json.dumps(response_schema, indent=2)\n            payload[\"messages\"] = [{\"role\": \"user\", \"content\": prompt_text}]\n\n        api_url = self.llm_base_url\n\n        try:\n            async with self._async_session.post(api_url, json=payload, timeout=self.llm_timeout, headers=headers) as response:\n                response.raise_for_status() # Raise an exception for bad status codes\n                result = await response.json()\n\n                if result.get('choices') and result['choices'][0].get('message') and \\\n                   result['choices'][0]['message'].get('content'):\n                    return result['choices'][0]['message']['content']\n                \n                self._report_error(\"LLM_RESPONSE_EMPTY\", \"LLM response had no content from local server.\", 0.5, {'prompt_snippet': prompt_text[:100], 'raw_result': str(result)})\n                return \"Error: LLM response empty.\"\n        except aiohttp.ClientError as e:\n            self._report_error(\"LLM_API_ERROR\", f\"LLM API request failed (aiohttp ClientError to local server): {e}\", 0.9, {'url': api_url})\n            return f\"Error: LLM API request failed: {e}\"\n        except asyncio.TimeoutError:\n            self._report_error(\"LLM_TIMEOUT\", f\"LLM API request timed out after {self.llm_timeout} seconds (local server).\", 0.8, {'prompt_snippet': prompt_text[:100]})\n            return \"Error: LLM API request timed out.\"\n        except json.JSONDecodeError:\n            self._report_error(\"LLM_JSON_PARSE_ERROR\", \"Failed to parse local LLM response JSON.\", 0.7, {'raw_response': str(result) if 'result' in locals() else 'N/A'})\n            return \"Error: Failed to parse LLM response.\"\n        except Exception as e:\n            self._report_error(\"UNEXPECTED_LLM_ERROR\", f\"An unexpected error occurred during local LLM call: {e}\", 0.9, {'prompt_snippet': prompt_text[:100]})\n            return f\"Error: An unexpected error occurred: {e}\"\n\n    # --- Utility to accumulate input salience ---\n    def _update_cumulative_salience(self, score):\n        \"\"\"Accumulates salience from new inputs for triggering LLM analysis.\"\"\"\n        self.cumulative_performance_salience += score\n        self.cumulative_performance_salience = min(1.0, self.cumulative_performance_salience) # Clamp at 1.0\n\n    # --- Pruning old history ---\n    def _prune_history(self):\n        \"\"\"Removes old entries from history deques based on recent_context_window_s.\"\"\"\n        current_time = rospy.get_time()\n        # Note: system_metrics deque has a larger maxlen as it needs more granular data\n        while self.recent_system_metrics and (current_time - float(self.recent_system_metrics[0].get('timestamp', 0.0))) > self.recent_context_window_s:\n            self.recent_system_metrics.popleft()\n        \n        for history_deque in [\n            self.recent_cognitive_directives, self.recent_motivation_states,\n            self.recent_world_model_states\n        ]:\n            while history_deque and (current_time - float(history_deque[0].get('timestamp', 0.0))) > self.recent_context_window_s:\n                history_deque.popleft()\n\n    # --- Callbacks for incoming data (populate history and accumulate salience) ---\n    def system_metric_callback(self, msg):\n        fields_map = {\n            'timestamp': (str(rospy.get_time()), 'timestamp'), 'metric_name': ('', 'metric_name'),\n            'value': (0.0, 'value'), 'unit': ('', 'unit'), 'source_node': ('unknown', 'source_node')\n        }\n        data = parse_ros_message_data(msg, fields_map, node_name=self.node_name)\n        self.recent_system_metrics.append(data)\n        # High or critical metric values might indicate performance issues\n        if \"error\" in data.get('metric_name', '').lower() and data.get('value', 0.0) > 0:\n            self._update_cumulative_salience(0.5)\n        elif \"latency\" in data.get('metric_name', '').lower() and data.get('value', 0.0) > 200: # Example threshold\n            self._update_cumulative_salience(0.3)\n        rospy.logdebug(f\"{self.node_name}: Received System Metric: {data.get('metric_name', 'N/A')}: {data.get('value', 'N/A')}.\")\n\n    def cognitive_directive_callback(self, msg):\n        fields_map = {\n            'timestamp': (str(rospy.get_time()), 'timestamp'), 'directive_type': ('', 'directive_type'),\n            'target_node': ('', 'target_node'), 'command_payload': ('{}', 'command_payload'),\n            'urgency': (0.0, 'urgency'), 'reason': ('', 'reason')\n        }\n        data = parse_ros_message_data(msg, fields_map, node_name=self.node_name)\n        \n        if data.get('target_node') == self.node_name and data.get('directive_type') == 'AuditPerformance':\n            try:\n                payload = json.loads(data.get('command_payload', '{}'))\n                self._update_cumulative_salience(data.get('urgency', 0.0) * 1.0) # Explicit audit request is high salience\n                rospy.loginfo(f\"{self.node_name}: Received directive to audit performance based on reason: '{data.get('reason', 'N/A')}'.\")\n            except json.JSONDecodeError as e:\n                self._report_error(\"JSON_DECODE_ERROR\", f\"Failed to decode command_payload in CognitiveDirective: {e}\", 0.5, {'payload': data.get('command_payload')})\n            except Exception as e:\n                self._report_error(\"DIRECTIVE_PROCESSING_ERROR\", f\"Error processing CognitiveDirective for performance: {e}\", 0.7, {'directive': data})\n        \n        self.recent_cognitive_directives.append(data) # Store all directives for context\n        rospy.logdebug(f\"{self.node_name}: Cognitive Directive received for context/action.\")\n\n    def motivation_state_callback(self, msg):\n        fields_map = {\n            'timestamp': (str(rospy.get_time()), 'timestamp'), 'dominant_goal_id': ('none', 'dominant_goal_id'),\n            'overall_drive_level': (0.0, 'overall_drive_level'), 'active_goals_json': ('{}', 'active_goals_json')\n        }\n        data = parse_ros_message_data(msg, fields_map, node_name=self.node_name)\n        if isinstance(data.get('active_goals_json'), str):\n            try: data['active_goals'] = json.loads(data['active_goals_json'])\n            except json.JSONDecodeError: data['active_goals'] = {}\n        self.recent_motivation_states.append(data)\n        # Current goals define what 'good' performance means (e.g., fast vs. accurate)\n        if data.get('overall_drive_level', 0.0) > 0.5:\n            self._update_cumulative_salience(data.get('overall_drive_level', 0.0) * 0.2)\n        rospy.logdebug(f\"{self.node_name}: Received Motivation State. Goal: {data.get('dominant_goal_id', 'N/A')}.\")\n\n    def world_model_state_callback(self, msg):\n        fields_map = {\n            'timestamp': (str(rospy.get_time()), 'timestamp'), 'num_entities': (0, 'num_entities'),\n            'changed_entities_json': ('[]', 'changed_entities_json'),\n            'significant_change_flag': (False, 'significant_change_flag'),\n            'consistency_score': (1.0, 'consistency_score')\n        }\n        data = parse_ros_message_data(msg, fields_map, node_name=self.node_name)\n        if isinstance(data.get('changed_entities_json'), str):\n            try: data['changed_entities'] = json.loads(data['changed_entities_json'])\n            except json.JSONDecodeError: data['changed_entities'] = []\n        self.recent_world_model_states.append(data)\n        # Environmental complexity influences expected performance\n        if data.get('significant_change_flag', False) and data.get('num_entities', 0) > 5:\n            self._update_cumulative_salience(0.3)\n        rospy.logdebug(f\"{self.node_name}: Received World Model State. Significant Change: {data.get('significant_change_flag', False)}.\")\n\n    # --- Core Performance Analysis Logic (Async with LLM) ---\n    async def analyze_performance_async(self, event):\n        \"\"\"\n        Asynchronously analyzes recent system metrics and cognitive context to generate\n        a comprehensive performance report, using LLM for nuanced assessment.\n        \"\"\"\n        self._prune_history() # Keep context history fresh\n\n        overall_score = self.current_performance_report.get('overall_score', 1.0)\n        suboptimal_flag = self.current_performance_report.get('suboptimal_flag', False)\n        kpis = self.current_performance_report.get('kpis', {})\n        llm_analysis_reasoning = \"Not evaluated by LLM.\"\n        \n        if self.cumulative_performance_salience >= self.llm_analysis_threshold_salience or \\\n           (self.current_performance_report.get('suboptimal_flag', False) and self.current_performance_report.get('overall_score', 1.0) < 0.7):\n            rospy.loginfo(f\"{self.node_name}: Triggering LLM for performance analysis (Salience: {self.cumulative_performance_salience:.2f}).\")\n            \n            context_for_llm = self._compile_llm_context_for_performance()\n            llm_performance_output = await self._assess_performance_llm(context_for_llm)\n\n            if llm_performance_output:\n                overall_score = max(0.0, min(1.0, llm_performance_output.get('overall_score', overall_score)))\n                suboptimal_flag = llm_performance_output.get('suboptimal_flag', suboptimal_flag)\n                kpis = llm_performance_output.get('kpis', kpis)\n                llm_analysis_reasoning = llm_performance_output.get('llm_analysis_reasoning', 'LLM provided no specific reasoning.')\n                rospy.loginfo(f\"{self.node_name}: LLM Performance Report. Score: {overall_score:.2f}. Suboptimal: {suboptimal_flag}.\")\n            else:\n                rospy.logwarn(f\"{self.node_name}: LLM performance analysis failed. Applying simple fallback.\")\n                overall_score, suboptimal_flag, kpis = self._apply_simple_performance_rules()\n                llm_analysis_reasoning = \"Fallback to simple rules due to LLM failure.\"\n        else:\n            rospy.logdebug(f\"{self.node_name}: Insufficient cumulative salience ({self.cumulative_performance_salience:.2f}) for LLM performance analysis. Applying simple rules.\")\n            overall_score, suboptimal_flag, kpis = self._apply_simple_performance_rules()\n            llm_analysis_reasoning = \"Fallback to simple rules due to low salience.\"\n\n        self.current_performance_report = {\n            'timestamp': str(rospy.get_time()),\n            'overall_score': overall_score,\n            'suboptimal_flag': suboptimal_flag,\n            'kpis': kpis\n        }\n\n        self.save_performance_log(\n            id=str(uuid.uuid4()),\n            timestamp=self.current_performance_report['timestamp'],\n            overall_score=self.current_performance_report['overall_score'],\n            suboptimal_flag=self.current_performance_report['suboptimal_flag'],\n            kpis_json=json.dumps(self.current_performance_report['kpis']),\n            llm_analysis_reasoning=llm_analysis_reasoning,\n            context_snapshot_json=json.dumps(self._compile_llm_context_for_performance())\n        )\n        self.publish_performance_report(None) # Publish updated report\n        self.cumulative_performance_salience = 0.0 # Reset after report generation\n\n    async def _assess_performance_llm(self, context_for_llm):\n        \"\"\"\n        Uses the LLM to assess the robot's overall performance and identify areas of suboptimality.\n        \"\"\"\n        prompt_text = f\"\"\"\n        You are the Performance Metrics Module of a robot's cognitive architecture, powered by a large language model. Your critical role is to analyze raw system metrics and contextual information to generate a comprehensive performance report. You must assess the robot's `overall_score`, identify if `suboptimal_flag` is true, and provide detailed `kpis`.\n\n        Robot's Recent System Metrics:\n        --- Raw System Metrics ---\n        {json.dumps(context_for_llm.get('recent_system_metrics', []), indent=2)}\n\n        Robot's Current Cognitive Context (for interpreting performance):\n        --- Cognitive Context ---\n        {json.dumps(context_for_llm.get('cognitive_context', {}), indent=2)}\n\n        Based on this data, provide:\n        1.  `overall_score`: number (0.0 to 1.0, where 1.0 is optimal performance. Aggregate all metrics and context into a single score.)\n        2.  `suboptimal_flag`: boolean (True if performance is significantly below expected or desired levels, False otherwise.)\n        3.  `kpis`: object (A JSON object containing key performance indicators, e.g., 'task_completion_rate', 'latency_avg_ms', 'resource_utilization_avg_percent', 'error_rate', 'goal_attainment_score').\n        4.  `llm_analysis_reasoning`: string (Detailed explanation for your assessment, referencing specific metrics, goals, and environmental factors that influenced the performance.)\n\n        Consider:\n        -   **System Metrics**: Analyze `value` for `metric_name` (e.g., high `error_rate`, high `latency_avg_ms`, low `resource_utilization_avg_percent` if idle is expected).\n        -   **Motivation State**: Is the robot pursuing a `dominant_goal_id`? How well is it progressing towards it given its `overall_drive_level`? (This implies a 'goal_attainment_score' KPI).\n        -   **World Model State**: Is the environment `complexity` high? This might justify lower performance scores. Are there `significant_change_flag`s that explain temporary dips?\n        -   **Cognitive Directives**: Was there a directive to `AuditPerformance` or `OptimizePerformance`? What was the reason?\n\n        Your response must be in JSON format, containing:\n        1.  'timestamp': string (current ROS time)\n        2.  'overall_score': number\n        3.  'suboptimal_flag': boolean\n        4.  'kpis': object\n        5.  'llm_analysis_reasoning': string\n        \"\"\"\n        response_schema = {\n            \"type\": \"object\",\n            \"properties\": {\n                \"timestamp\": {\"type\": \"string\"},\n                \"overall_score\": {\"type\": \"number\", \"minimum\": 0.0, \"maximum\": 1.0},\n                \"suboptimal_flag\": {\"type\": \"boolean\"},\n                \"kpis\": {\"type\": \"object\"}, # Flexible JSON structure for KPIs\n                \"llm_analysis_reasoning\": {\"type\": \"string\"}\n            },\n            \"required\": [\"timestamp\", \"overall_score\", \"suboptimal_flag\", \"kpis\", \"llm_analysis_reasoning\"]\n        }\n\n        llm_output_str = await self._call_llm_api(prompt_text, response_schema, temperature=0.1, max_tokens=400)\n\n        if not llm_output_str.startswith(\"Error:\"):\n            try:\n                llm_data = json.loads(llm_output_str)\n                # Ensure boolean/numerical fields are correctly parsed\n                if 'overall_score' in llm_data: llm_data['overall_score'] = float(llm_data['overall_score'])\n                if 'suboptimal_flag' in llm_data: llm_data['suboptimal_flag'] = bool(llm_data['suboptimal_flag'])\n                return llm_data\n            except json.JSONDecodeError as e:\n                self._report_error(\"LLM_PARSE_ERROR\", f\"Failed to parse LLM response for performance: {e}. Raw: {llm_output_str}\", 0.8)\n                return None\n        else:\n            self._report_error(\"LLM_PERFORMANCE_ANALYSIS_FAILED\", f\"LLM call failed for performance analysis: {llm_output_str}\", 0.9)\n            return None\n\n    def _apply_simple_performance_rules(self):\n        \"\"\"\n        Fallback mechanism to generate a simple performance report using rule-based logic\n        if LLM is not triggered or fails.\n        \"\"\"\n        current_time = rospy.get_time()\n        \n        # Calculate simple KPIs from recent system metrics\n        total_latency = 0.0\n        error_count = 0\n        cpu_util_sum = 0.0\n        num_metrics = 0\n        \n        for metric in self.recent_system_metrics:\n            if current_time - float(metric.get('timestamp', 0.0)) < 5.0: # Only consider very recent metrics for simple average\n                if metric.get('metric_name') == 'latency_ms':\n                    total_latency += metric.get('value', 0.0)\n                elif metric.get('metric_name') == 'error_count':\n                    error_count += metric.get('value', 0.0)\n                elif metric.get('metric_name') == 'cpu_util_percent':\n                    cpu_util_sum += metric.get('value', 0.0)\n                num_metrics += 1\n\n        avg_latency = total_latency / num_metrics if num_metrics > 0 else 0.0\n        avg_cpu_util = cpu_util_sum / num_metrics if num_metrics > 0 else 0.0\n        \n        # Simple task completion rate (hypothetical for fallback)\n        task_completion_rate = 1.0 # Assume perfect unless an error flag indicates otherwise\n        if error_count > 0 or avg_latency > 150:\n            task_completion_rate = 0.8 # Reduced if errors or high latency\n\n        kpis = {\n            'task_completion_rate': task_completion_rate,\n            'latency_avg_ms': avg_latency,\n            'resource_utilization_avg_percent': avg_cpu_util,\n            'error_rate': error_count\n        }\n\n        # Determine overall score and suboptimal flag\n        overall_score = 1.0\n        suboptimal_flag = False\n\n        if kpis['latency_avg_ms'] > 100:\n            overall_score -= 0.2\n            suboptimal_flag = True\n        if kpis['error_rate'] > 0:\n            overall_score -= 0.3\n            suboptimal_flag = True\n        if kpis['task_completion_rate'] < 0.9:\n            overall_score -= 0.4\n            suboptimal_flag = True\n        \n        # Clamp score between 0 and 1\n        overall_score = max(0.0, min(1.0, overall_score))\n\n        rospy.logwarn(f\"{self.node_name}: Simple rule: Generated fallback performance report. Score: {overall_score:.2f}.\")\n        return overall_score, suboptimal_flag, kpis\n\n\n    def _compile_llm_context_for_performance(self):\n        \"\"\"\n        Gathers and formats all relevant data for the LLM's performance assessment.\n        \"\"\"\n        context = {\n            \"current_time\": rospy.get_time(),\n            \"last_performance_report\": self.current_performance_report,\n            \"recent_system_metrics\": list(self.recent_system_metrics),\n            \"cognitive_context\": {\n                \"latest_motivation_state\": self.recent_motivation_states[-1] if self.recent_motivation_states else \"N/A\",\n                \"latest_world_model_state\": self.recent_world_model_states[-1] if self.recent_world_model_states else \"N/A\",\n                \"cognitive_directives_for_self\": [d for d in self.recent_cognitive_directives if d.get('target_node') == self.node_name]\n            }\n        }\n        \n        # Deep parse any nested JSON strings in context for better LLM understanding\n        for category_key in context[\"cognitive_context\"]:\n            item = context[\"cognitive_context\"][category_key]\n            if isinstance(item, dict):\n                for field, value in item.items():\n                    if isinstance(value, str) and field.endswith('_json'):\n                        try: item[field] = json.loads(value)\n                        except json.JSONDecodeError: pass\n\n        return context\n\n    # --- Database and Publishing Functions ---\n    def save_performance_log(self, id, timestamp, overall_score, suboptimal_flag, kpis_json, llm_analysis_reasoning, context_snapshot_json):\n        \"\"\"Saves a performance report entry to the SQLite database.\"\"\"\n        try:\n            self.cursor.execute('''\n                INSERT INTO performance_log (id, timestamp, overall_score, suboptimal_flag, kpis_json, llm_analysis_reasoning, context_snapshot_json)\n                VALUES (?, ?, ?, ?, ?, ?, ?)\n            ''', (id, timestamp, overall_score, suboptimal_flag, kpis_json, llm_analysis_reasoning, context_snapshot_json))\n            self.conn.commit()\n            rospy.logdebug(f\"{self.node_name}: Saved performance log (ID: {id}, Score: {overall_score}).\")\n        except sqlite3.Error as e:\n            self._report_error(\"DB_SAVE_ERROR\", f\"Failed to save performance log: {e}\", 0.9)\n        except Exception as e:\n            self._report_error(\"UNEXPECTED_SAVE_ERROR\", f\"Unexpected error in save_performance_log: {e}\", 0.9)\n\n\n    def publish_performance_report(self, event):\n        \"\"\"Publishes the robot's current performance report.\"\"\"\n        timestamp = str(rospy.get_time())\n        # Update timestamp before publishing\n        self.current_performance_report['timestamp'] = timestamp\n        \n        try:\n            if isinstance(PerformanceReport, type(String)): # Fallback to String message\n                self.pub_performance_report.publish(json.dumps(self.current_performance_report))\n            else:\n                report_msg = PerformanceReport()\n                report_msg.timestamp = timestamp\n                report_msg.overall_score = self.current_performance_report['overall_score']\n                report_msg.suboptimal_flag = self.current_performance_report['suboptimal_flag']\n                report_msg.kpis_json = json.dumps(self.current_performance_report['kpis'])\n                self.pub_performance_report.publish(report_msg)\n\n            rospy.logdebug(f\"{self.node_name}: Published Performance Report. Score: '{self.current_performance_report['overall_score']}'.\")\n\n        except Exception as e:\n            self._report_error(\"PUBLISH_PERFORMANCE_REPORT_ERROR\", f\"Failed to publish performance report: {e}\", 0.7)\n\n    def publish_cognitive_directive(self, directive_type, target_node, command_payload, urgency, reason=\"\"):\n        \"\"\"Helper to publish a CognitiveDirective message.\"\"\"\n        timestamp = str(rospy.get_time())\n        try:\n            if isinstance(CognitiveDirective, type(String)): # Fallback to String message\n                directive_data = {\n                    'timestamp': timestamp,\n                    'directive_type': directive_type,\n                    'target_node': target_node,\n                    'command_payload': command_payload, # Already JSON string\n                    'urgency': urgency,\n                    'reason': reason\n                }\n                self.pub_cognitive_directive.publish(json.dumps(directive_data))\n            else:\n                directive_msg = CognitiveDirective()\n                directive_msg.timestamp = timestamp\n                directive_msg.directive_type = directive_type\n                directive_msg.target_node = target_node\n                directive_msg.command_payload = command_payload\n                directive_msg.urgency = urgency\n                directive_msg.reason = reason\n                self.pub_cognitive_directive.publish(directive_msg)\n            rospy.logdebug(f\"{self.node_name}: Issued Cognitive Directive '{directive_type}' to '{target_node}'.\")\n        except Exception as e:\n            rospy.logerr(f\"{self.node_name}: Failed to issue cognitive directive from Performance Metrics Node: {e}\")\n\n\n    def run(self):\n        \"\"\"Starts the ROS node and keeps it spinning.\"\"\"\n        rospy.spin()\n\n    def __del__(self):\n        \"\"\"Ensures the database connection is closed on node shutdown and async loop is stopped.\"\"\"\n        rospy.loginfo(f\"{self.node_name} shutting down. Closing database connection and asyncio loop.\")\n        if hasattr(self, 'conn') and self.conn:\n            self.conn.close()\n        self._shutdown_async_loop()\n\nif __name__ == '__main__':\n    try:\n        node = PerformanceMetricsNode()\n        node.run()\n    except rospy.ROSInterruptException:\n        rospy.loginfo(f\"{rospy.get_name()} interrupted by ROS shutdown.\")\n        if 'node' in locals() and isinstance(node, PerformanceMetricsNode):\n            node._shutdown_async_loop()\n            if hasattr(node, 'conn'): node.conn.close()\n    except Exception as e:\n        rospy.logerr(f\"{rospy.get_name()} encountered an unexpected error: {e}\")\n        if 'node' in locals() and isinstance(node, PerformanceMetricsNode):\n            node._shutdown_async_loop()\n            if hasattr(node, 'conn'): node.conn.close()","outputs":[],"execution_count":null,"metadata":{}}],"metadata":{"colab":{"from_bard":true},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}