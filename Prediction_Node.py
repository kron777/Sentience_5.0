{"cells":[{"cell_type":"code","source":"#!/usr/bin/env python3\nimport rospy\nimport sqlite3\nimport os\nimport json\nimport time\nimport random\nimport uuid # For unique prediction IDs\n\n# --- Asyncio Imports for LLM calls ---\nimport asyncio\nimport aiohttp\nimport threading\nfrom collections import deque\n\nfrom std_msgs.msg import String\n\n# Updated imports for custom messages:\ntry:\n    from sentience.msg import (\n        PredictionState,        # Output: Predicted future events and their confidence\n        SensoryQualia,          # Input: Current sensory perceptions (for predicting immediate future)\n        WorldModelState,        # Input: Current world state (for environmental context and dynamics)\n        MemoryResponse,         # Input: Retrieved historical data, patterns, causal links\n        CognitiveDirective,     # Input: Directives for specific predictions or prediction focus\n        AttentionState,         # Input: Current attention focus (influences what to predict about)\n        MotivationState         # Input: Current goals (for goal-oriented predictions)\n    )\nexcept ImportError:\n    rospy.logwarn(\"Custom ROS messages for 'sentience' package not found. Using String for all incoming/outgoing data for fallback in Prediction Node.\")\n    PredictionState = String\n    SensoryQualia = String\n    WorldModelState = String\n    MemoryResponse = String\n    CognitiveDirective = String\n    AttentionState = String\n    MotivationState = String\n    String = String # Ensure String is defined even if other custom messages aren't\n\n# --- Import shared utility functions ---\n# Assuming 'sentience/scripts/utils.py' exists and contains parse_ros_message_data and load_config\ntry:\n    from sentience.scripts.utils import parse_ros_message_data, load_config\nexcept ImportError:\n    rospy.logwarn(\"Could not import sentience.scripts.utils. Using fallback for parse_ros_message_data and load_config.\")\n    # Fallback implementations if the utility file isn't available\n    def parse_ros_message_data(msg, fields_map, node_name=\"unknown_node\"):\n        \"\"\"\n        Fallback parser for ROS messages, assuming String message and JSON content.\n        If msg is not String, it attempts to access attributes directly.\n        \"\"\"\n        data = {}\n        if isinstance(msg, String):\n            try:\n                parsed_json = json.loads(msg.data)\n                for key_in_msg, (default_val, target_key) in fields_map.items():\n                    data[target_key] = parsed_json.get(key_in_msg, default_val)\n            except json.JSONDecodeError:\n                rospy.logerr(f\"{node_name}: Could not parse String message data as JSON: {msg.data}\")\n                for key_in_msg, (default_val, target_key) in fields_map.items():\n                    data[target_key] = default_val # Use defaults on JSON error\n        else:\n            # Attempt to get attributes directly from the message object\n            for key_in_msg, (default_val, target_key) in fields_map.items():\n                data[target_key] = getattr(msg, key_in_msg, default_val)\n        return data\n\n    def load_config(node_name, config_path):\n        \"\"\"\n        Fallback config loader: returns hardcoded defaults.\n        In a real scenario, this should load from a YAML file.\n        \"\"\"\n        rospy.logwarn(f\"{node_name}: Using hardcoded default configuration as '{config_path}' could not be loaded.\")\n        return {\n            'db_root_path': '/tmp/sentience_db',\n            'default_log_level': 'INFO',\n            'prediction_node': {\n                'prediction_interval': 0.5, # How often to generate new predictions\n                'llm_prediction_threshold_salience': 0.6, # Cumulative salience to trigger LLM\n                'recent_context_window_s': 10.0 # Window for deques for LLM context\n            },\n            'llm_params': { # Global LLM parameters for fallback\n                'model_name': \"phi-2\",\n                'base_url': \"http://localhost:8000/v1/chat/completions\",\n                'timeout_seconds': 25.0\n            }\n        }.get(node_name, {}) # Return node-specific or empty dict\n\n\nclass PredictionNode:\n    def __init__(self):\n        rospy.init_node('prediction_node', anonymous=False)\n        self.node_name = rospy.get_name()\n\n        # --- Load parameters from centralized config ---\n        config_file_path = rospy.get_param('~config_file_path', None)\n        if config_file_path is None:\n            rospy.logfatal(f\"{self.node_name}: 'config_file_path' parameter is not set. Cannot load configuration. Shutting down.\")\n            rospy.signal_shutdown(\"Missing config_file_path parameter.\")\n            return\n\n        full_config = load_config(\"global\", config_file_path) # Load global params\n        self.params = load_config(self.node_name.strip('/'), config_file_path) # Load node-specific params\n\n        if not self.params or not full_config:\n            rospy.logfatal(f\"{self.node_name}: Failed to load configuration from '{config_file_path}'. Shutting down.\")\n            rospy.signal_shutdown(\"Configuration loading failed.\")\n            return\n\n        # Assign parameters\n        self.db_path = os.path.join(full_config.get('db_root_path', '/tmp/sentience_db'), \"prediction_log.db\")\n        self.prediction_interval = self.params.get('prediction_interval', 0.5) # How often to generate new predictions\n        self.llm_prediction_threshold_salience = self.params.get('llm_prediction_threshold_salience', 0.6) # Salience to trigger LLM\n        self.recent_context_window_s = self.params.get('recent_context_window_s', 10.0) # Context window for LLM\n\n        # LLM Parameters (from global config)\n        self.llm_model_name = full_config.get('llm_params', {}).get('model_name', \"phi-2\")\n        self.llm_base_url = full_config.get('llm_params', {}).get('base_url', \"http://localhost:8000/v1/chat/completions\")\n        self.llm_timeout = full_config.get('llm_params', {}).get('timeout_seconds', 25.0) # Timeout for LLM calls\n\n        # Set ROS log level from config\n        rospy.set_param('/rosout/log_level', full_config.get('default_log_level', 'INFO').upper())\n\n\n        # --- Asyncio Setup ---\n        self._async_loop = asyncio.new_event_loop()\n        self._async_thread = threading.Thread(target=self._run_async_loop, daemon=True)\n        self._async_thread.start()\n        self._async_session = None\n        self.active_llm_task = None # To track the currently running LLM task\n\n        # --- Initialize SQLite database ---\n        os.makedirs(os.path.dirname(self.db_path), exist_ok=True)\n        self.conn = sqlite3.connect(self.db_path, check_same_thread=False)\n        self.cursor = self.conn.cursor()\n\n        # Create the 'predictions' table if it doesn't exist.\n        # NEW: Added 'llm_reasoning', 'context_snapshot_json'\n        self.cursor.execute('''\n            CREATE TABLE IF NOT EXISTS predictions (\n                id TEXT PRIMARY KEY,            -- Unique prediction ID (UUID)\n                timestamp TEXT,\n                predicted_event TEXT,           -- Description of the predicted event\n                prediction_confidence REAL,     -- Confidence score of the prediction (0.0 to 1.0)\n                prediction_accuracy REAL,       -- Actual accuracy (updated post-facto if possible)\n                urgency_flag BOOLEAN,           -- True if the predicted event requires immediate attention\n                llm_reasoning TEXT,             -- NEW: LLM's detailed reasoning for the prediction\n                context_snapshot_json TEXT      -- NEW: JSON of relevant cognitive context at time of prediction\n            )\n        ''')\n        self.cursor.execute('CREATE INDEX IF NOT EXISTS idx_predictions_timestamp ON predictions (timestamp)')\n        self.conn.commit() # Commit schema changes\n\n        # --- Internal State ---\n        self.last_generated_prediction = {\n            'timestamp': str(rospy.get_time()),\n            'predicted_event': 'The robot will continue operating normally.',\n            'prediction_confidence': 0.9,\n            'prediction_accuracy': -1.0, # -1.0 means not yet evaluated\n            'urgency_flag': False\n        }\n\n        # Deques to maintain a short history of inputs relevant to prediction\n        self.recent_sensory_qualia = deque(maxlen=5) # Immediate environmental cues\n        self.recent_world_model_states = deque(maxlen=5) # Environmental dynamics and objects\n        self.recent_memory_responses = deque(maxlen=5) # Historical patterns, causal knowledge\n        self.recent_cognitive_directives = deque(maxlen=3) # Directives for specific predictions\n        self.recent_attention_states = deque(maxlen=3) # What robot is focusing on\n        self.recent_motivation_states = deque(maxlen=3) # Goals (predict success/failure)\n\n        self.cumulative_prediction_salience = 0.0 # Aggregated salience to trigger LLM prediction\n\n        # --- Publishers ---\n        self.pub_prediction_state = rospy.Publisher('/prediction_state', PredictionState, queue_size=10)\n        self.pub_error_report = rospy.Publisher('/error_monitor/report', String, queue_size=10)\n        self.pub_cognitive_directive = rospy.Publisher('/cognitive_directives', CognitiveDirective, queue_size=10) # To signal urgent predictions\n\n\n        # --- Subscribers ---\n        rospy.Subscriber('/sensory_qualia', SensoryQualia, self.sensory_qualia_callback)\n        rospy.Subscriber('/world_model_state', String, self.world_model_state_callback) # Stringified JSON\n        rospy.Subscriber('/memory_response', String, self.memory_response_callback) # Stringified JSON\n        rospy.Subscriber('/cognitive_directives', CognitiveDirective, self.cognitive_directive_callback)\n        rospy.Subscriber('/attention_state', AttentionState, self.attention_state_callback)\n        rospy.Subscriber('/motivation_state', String, self.motivation_state_callback) # Stringified JSON\n\n\n        # --- Timer for periodic prediction generation ---\n        rospy.Timer(rospy.Duration(self.prediction_interval), self._run_prediction_generation_wrapper)\n\n        rospy.loginfo(f\"{self.node_name}: Robot's prediction system online.\")\n        # Publish initial prediction\n        self.publish_prediction_state(None)\n\n    # --- Asyncio Thread Management ---\n    def _run_async_loop(self):\n        asyncio.set_event_loop(self._async_loop)\n        self._async_loop.run_until_complete(self._create_async_session())\n        self._async_loop.run_forever()\n\n    async def _create_async_session(self):\n        rospy.loginfo(f\"{self.node_name}: Creating aiohttp ClientSession...\")\n        self._async_session = aiohttp.ClientSession()\n        rospy.loginfo(f\"{self.node_name}: aiohttp ClientSession created.\")\n\n    async def _close_async_session(self):\n        if self._async_session:\n            rospy.loginfo(f\"{self.node_name}: Closing aiohttp ClientSession...\")\n            await self._async_session.close()\n            self._async_session = None\n            rospy.loginfo(f\"{self.node_name}: aiohttp ClientSession closed.\")\n\n    def _shutdown_async_loop(self):\n        if self._async_loop and self._async_thread.is_alive():\n            rospy.loginfo(f\"{self.node_name}: Shutting down asyncio loop...\")\n            future = asyncio.run_coroutine_threadsafe(self._close_async_session(), self._async_loop)\n            try:\n                future.result(timeout=5.0)\n            except asyncio.TimeoutError:\n                rospy.logwarn(f\"{self.node_name}: Timeout waiting for async session to close.\")\n            self._async_loop.call_soon_threadsafe(self._async_loop.stop)\n            self._async_thread.join(timeout=5.0)\n            if self._async_thread.is_alive():\n                rospy.logwarn(f\"{self.node_name}: Asyncio thread did not shut down gracefully.\")\n            rospy.loginfo(f\"{self.node_name}: Asyncio loop shut down.\")\n\n    def _run_prediction_generation_wrapper(self, event):\n        \"\"\"Wrapper to run the async prediction generation from a ROS timer.\"\"\"\n        if self.active_llm_task and not self.active_llm_task.done():\n            rospy.logdebug(f\"{self.node_name}: LLM prediction task already active. Skipping new cycle.\")\n            return\n        \n        # Schedule the async task\n        self.active_llm_task = asyncio.run_coroutine_threadsafe(\n            self.generate_prediction_async(event), self._async_loop\n        )\n\n    # --- Error Reporting Utility ---\n    def _report_error(self, error_type, description, severity=0.5, context=None):\n        timestamp = str(rospy.get_time())\n        error_msg_data = {\n            'timestamp': timestamp, 'source_node': self.node_name, 'error_type': error_type,\n            'description': description, 'severity': severity, 'context': context if context else {}\n        }\n        try:\n            self.pub_error_report.publish(json.dumps(error_msg_data))\n            rospy.logerr(f\"{self.node_name}: REPORTED ERROR: {error_type} - {description}\")\n        except Exception as e:\n            rospy.logerr(f\"{self.node_name}: Failed to publish error report: {e}\")\n\n    # --- LLM Call Function (ADAPTED FOR LOCAL PHI-2 SERVER) ---\n    async def _call_llm_api(self, prompt_text, response_schema=None, temperature=0.2, max_tokens=250):\n        \"\"\"\n        Asynchronously calls the local LLM inference server (e.g., llama.cpp compatible API).\n        Can optionally request a structured JSON response. Low temperature for factual prediction.\n        \"\"\"\n        if not self._async_session:\n            await self._create_async_session() # Attempt to create if not exists\n            if not self._async_session:\n                self._report_error(\"LLM_SESSION_ERROR\", \"aiohttp session not available for LLM call.\", 0.8)\n                return \"Error: LLM session not ready.\"\n\n        payload = {\n            \"model\": self.llm_model_name,\n            \"messages\": [{\"role\": \"user\", \"content\": prompt_text}],\n            \"temperature\": temperature, # Low temperature for factual prediction\n            \"max_tokens\": max_tokens,\n            \"stream\": False\n        }\n        headers = {'Content-Type': 'application/json'}\n\n        if response_schema:\n            prompt_text += \"\\n\\nProvide the response in JSON format according to this schema:\\n\" + json.dumps(response_schema, indent=2)\n            payload[\"messages\"] = [{\"role\": \"user\", \"content\": prompt_text}]\n\n        api_url = self.llm_base_url\n\n        try:\n            async with self._async_session.post(api_url, json=payload, timeout=self.llm_timeout, headers=headers) as response:\n                response.raise_for_status() # Raise an exception for bad status codes\n                result = await response.json()\n\n                if result.get('choices') and result['choices'][0].get('message') and \\\n                   result['choices'][0]['message'].get('content'):\n                    return result['choices'][0]['message']['content']\n                \n                self._report_error(\"LLM_RESPONSE_EMPTY\", \"LLM response had no content from local server.\", 0.5, {'prompt_snippet': prompt_text[:100], 'raw_result': str(result)})\n                return \"Error: LLM response empty.\"\n        except aiohttp.ClientError as e:\n            self._report_error(\"LLM_API_ERROR\", f\"LLM API request failed (aiohttp ClientError to local server): {e}\", 0.9, {'url': api_url})\n            return f\"Error: LLM API request failed: {e}\"\n        except asyncio.TimeoutError:\n            self._report_error(\"LLM_TIMEOUT\", f\"LLM API request timed out after {self.llm_timeout} seconds (local server).\", 0.8, {'prompt_snippet': prompt_text[:100]})\n            return \"Error: LLM API request timed out.\"\n        except json.JSONDecodeError:\n            self._report_error(\"LLM_JSON_PARSE_ERROR\", \"Failed to parse local LLM response JSON.\", 0.7, {'raw_response': str(result) if 'result' in locals() else 'N/A'})\n            return \"Error: Failed to parse LLM response.\"\n        except Exception as e:\n            self._report_error(\"UNEXPECTED_LLM_ERROR\", f\"An unexpected error occurred during local LLM call: {e}\", 0.9, {'prompt_snippet': prompt_text[:100]})\n            return f\"Error: An unexpected error occurred: {e}\"\n\n    # --- Utility to accumulate input salience ---\n    def _update_cumulative_salience(self, score):\n        \"\"\"Accumulates salience from new inputs for triggering LLM prediction.\"\"\"\n        self.cumulative_prediction_salience += score\n        self.cumulative_prediction_salience = min(1.0, self.cumulative_prediction_salience) # Clamp at 1.0\n\n    # --- Pruning old history ---\n    def _prune_history(self):\n        \"\"\"Removes old entries from history deques based on recent_context_window_s.\"\"\"\n        current_time = rospy.get_time()\n        for history_deque in [\n            self.recent_sensory_qualia, self.recent_world_model_states,\n            self.recent_memory_responses, self.recent_cognitive_directives,\n            self.recent_attention_states, self.recent_motivation_states\n        ]:\n            while history_deque and (current_time - float(history_deque[0].get('timestamp', 0.0))) > self.recent_context_window_s:\n                history_deque.popleft()\n\n    # --- Callbacks for incoming data (populate history and accumulate salience) ---\n    def sensory_qualia_callback(self, msg):\n        fields_map = {\n            'timestamp': (str(rospy.get_time()), 'timestamp'), 'qualia_id': ('', 'qualia_id'),\n            'qualia_type': ('none', 'qualia_type'), 'modality': ('none', 'modality'),\n            'description_summary': ('', 'description_summary'), 'salience_score': (0.0, 'salience_score'),\n            'raw_data_hash': ('', 'raw_data_hash')\n        }\n        data = parse_ros_message_data(msg, fields_map, node_name=self.node_name)\n        self.recent_sensory_qualia.append(data)\n        # Highly salient sensory input can trigger predictions (e.g., loud noise -> collision?)\n        if data.get('salience_score', 0.0) > 0.7:\n            self._update_cumulative_salience(data.get('salience_score', 0.0) * 0.4)\n        rospy.logdebug(f\"{self.node_name}: Received Sensory Qualia. Description: {data.get('description_summary', 'N/A')}.\")\n\n    def world_model_state_callback(self, msg):\n        fields_map = {\n            'timestamp': (str(rospy.get_time()), 'timestamp'), 'num_entities': (0, 'num_entities'),\n            'changed_entities_json': ('[]', 'changed_entities_json'),\n            'significant_change_flag': (False, 'significant_change_flag'),\n            'consistency_score': (1.0, 'consistency_score')\n        }\n        data = parse_ros_message_data(msg, fields_map, node_name=self.node_name)\n        if isinstance(data.get('changed_entities_json'), str):\n            try: data['changed_entities'] = json.loads(data['changed_entities_json'])\n            except json.JSONDecodeError: data['changed_entities'] = []\n        self.recent_world_model_states.append(data)\n        # Changes in world model, especially involving dynamic objects or human presence, trigger predictions\n        if data.get('significant_change_flag', False):\n            self._update_cumulative_salience(0.5)\n        rospy.logdebug(f\"{self.node_name}: Received World Model State. Significant Change: {data.get('significant_change_flag', False)}.\")\n\n    def memory_response_callback(self, msg):\n        fields_map = {\n            'timestamp': (str(rospy.get_time()), 'timestamp'), 'request_id': ('', 'request_id'),\n            'response_code': (0, 'response_code'), 'memories_json': ('[]', 'memories_json')\n        }\n        data = parse_ros_message_data(msg, fields_map, node_name=self.node_name)\n        if isinstance(data.get('memories_json'), str):\n            try: data['memories'] = json.loads(data['memories_json'])\n            except json.JSONDecodeError: data['memories'] = []\n        else: data['memories'] = []\n        self.recent_memory_responses.append(data)\n        # Recalled historical patterns or causal relationships are critical for prediction\n        if data.get('response_code', 0) == 200 and data.get('memories'):\n            if any('pattern' in mem.get('category', '') or 'causal_link' in mem.get('category', '') for mem in data['memories']):\n                self._update_cumulative_salience(0.6)\n        rospy.logdebug(f\"{self.node_name}: Received Memory Response for request ID: {data.get('request_id', 'N/A')}.\")\n\n    def cognitive_directive_callback(self, msg):\n        fields_map = {\n            'timestamp': (str(rospy.get_time()), 'timestamp'), 'directive_type': ('', 'directive_type'),\n            'target_node': ('', 'target_node'), 'command_payload': ('{}', 'command_payload'),\n            'urgency': (0.0, 'urgency'), 'reason': ('', 'reason')\n        }\n        data = parse_ros_message_data(msg, fields_map, node_name=self.node_name)\n        \n        if data.get('target_node') == self.node_name and data.get('directive_type') == 'PredictEvent':\n            try:\n                payload = json.loads(data.get('command_payload', '{}'))\n                # This directive doesn't go into a queue, it directly influences the next prediction cycle\n                self._update_cumulative_salience(data.get('urgency', 0.0) * 1.0) # High urgency for direct prediction requests\n                rospy.loginfo(f\"{self.node_name}: Received directive to predict event based on reason: '{data.get('reason', 'N/A')}'.\")\n            except json.JSONDecodeError as e:\n                self._report_error(\"JSON_DECODE_ERROR\", f\"Failed to decode command_payload in CognitiveDirective: {e}\", 0.5, {'payload': data.get('command_payload')})\n            except Exception as e:\n                self._report_error(\"DIRECTIVE_PROCESSING_ERROR\", f\"Error processing CognitiveDirective for prediction: {e}\", 0.7, {'directive': data})\n        \n        self.recent_cognitive_directives.append(data) # Store all directives for context\n        rospy.logdebug(f\"{self.node_name}: Cognitive Directive received for context/action.\")\n\n    def attention_state_callback(self, msg):\n        fields_map = {\n            'timestamp': (str(rospy.get_time()), 'timestamp'), 'focus_type': ('idle', 'focus_type'),\n            'focus_target': ('environment', 'focus_target'), 'priority_score': (0.0, 'priority_score')\n        }\n        data = parse_ros_message_data(msg, fields_map, node_name=self.node_name)\n        self.recent_attention_states.append(data)\n        # What the robot is attending to is often what needs prediction\n        if data.get('priority_score', 0.0) > 0.6:\n            self._update_cumulative_salience(data.get('priority_score', 0.0) * 0.3)\n        rospy.logdebug(f\"{self.node_name}: Received Attention State. Focus: {data.get('focus_target', 'N/A')}.\")\n\n    def motivation_state_callback(self, msg):\n        fields_map = {\n            'timestamp': (str(rospy.get_time()), 'timestamp'), 'dominant_goal_id': ('none', 'dominant_goal_id'),\n            'overall_drive_level': (0.0, 'overall_drive_level'), 'active_goals_json': ('{}', 'active_goals_json')\n        }\n        data = parse_ros_message_data(msg, fields_map, node_name=self.node_name)\n        if isinstance(data.get('active_goals_json'), str):\n            try: data['active_goals'] = json.loads(data['active_goals_json'])\n            except json.JSONDecodeError: data['active_goals'] = {}\n        self.recent_motivation_states.append(data)\n        # Current goals require predictions about success/failure or progress impediments\n        if data.get('overall_drive_level', 0.0) > 0.5:\n            self._update_cumulative_salience(data.get('overall_drive_level', 0.0) * 0.2)\n        rospy.logdebug(f\"{self.node_name}: Received Motivation State. Goal: {data.get('dominant_goal_id', 'N/A')}.\")\n\n    # --- Core Prediction Logic (Async with LLM) ---\n    async def generate_prediction_async(self, event):\n        \"\"\"\n        Asynchronously generates predictions about future events based on integrated\n        cognitive states, using LLM for probabilistic reasoning.\n        \"\"\"\n        self._prune_history() # Keep context history fresh\n\n        predicted_event = \"No significant event predicted.\"\n        prediction_confidence = 0.5\n        urgency_flag = False\n        llm_reasoning = \"Not evaluated by LLM.\"\n        \n        if self.cumulative_prediction_salience >= self.llm_prediction_threshold_salience:\n            rospy.loginfo(f\"{self.node_name}: Triggering LLM for prediction generation (Salience: {self.cumulative_prediction_salience:.2f}).\")\n            \n            context_for_llm = self._compile_llm_context_for_prediction()\n            llm_prediction_output = await self._make_prediction_llm(context_for_llm)\n\n            if llm_prediction_output:\n                predicted_event = llm_prediction_output.get('predicted_event', 'No prediction.')\n                prediction_confidence = max(0.0, min(1.0, llm_prediction_output.get('prediction_confidence', 0.5)))\n                urgency_flag = llm_prediction_output.get('urgency_flag', False)\n                llm_reasoning = llm_prediction_output.get('llm_reasoning', 'LLM provided no specific reasoning.')\n                rospy.loginfo(f\"{self.node_name}: LLM Predicted: '{predicted_event}' (Confidence: {prediction_confidence:.2f}, Urgent: {urgency_flag}).\")\n            else:\n                rospy.logwarn(f\"{self.node_name}: LLM prediction generation failed. Applying simple fallback.\")\n                predicted_event, prediction_confidence, urgency_flag = self._apply_simple_prediction_rules()\n                llm_reasoning = \"Fallback to simple rules due to LLM failure.\"\n        else:\n            rospy.logdebug(f\"{self.node_name}: Insufficient cumulative salience ({self.cumulative_prediction_salience:.2f}) for LLM prediction. Applying simple rules.\")\n            predicted_event, prediction_confidence, urgency_flag = self._apply_simple_prediction_rules()\n            llm_reasoning = \"Fallback to simple rules due to low salience.\"\n\n        self.last_generated_prediction = {\n            'timestamp': str(rospy.get_time()),\n            'predicted_event': predicted_event,\n            'prediction_confidence': prediction_confidence,\n            'prediction_accuracy': -1.0, # Not evaluated yet\n            'urgency_flag': urgency_flag\n        }\n\n        self.save_prediction_log(\n            id=str(uuid.uuid4()),\n            timestamp=self.last_generated_prediction['timestamp'],\n            predicted_event=self.last_generated_prediction['predicted_event'],\n            prediction_confidence=self.last_generated_prediction['prediction_confidence'],\n            prediction_accuracy=self.last_generated_prediction['prediction_accuracy'],\n            urgency_flag=self.last_generated_prediction['urgency_flag'],\n            llm_reasoning=llm_reasoning,\n            context_snapshot_json=json.dumps(self._compile_llm_context_for_prediction())\n        )\n        self.publish_prediction_state(None) # Publish updated prediction state\n        self.cumulative_prediction_salience = 0.0 # Reset after generation\n\n    async def _make_prediction_llm(self, context_for_llm):\n        \"\"\"\n        Uses the LLM to make a prediction about a future event.\n        \"\"\"\n        prompt_text = f\"\"\"\n        You are the Prediction Module of a robot's cognitive architecture, powered by a large language model. Your function is to predict salient future events based on the robot's current sensory input, world model, historical memory, and internal states. You must also assess the `prediction_confidence` and mark if it's an `urgency_flag` event.\n\n        Robot's Current Integrated Cognitive State (for Prediction):\n        --- Cognitive Context ---\n        {json.dumps(context_for_llm, indent=2)}\n\n        Based on this context, provide:\n        1.  `predicted_event`: string (A concise description of the most probable and salient future event, e.g., \"User will request assistance\", \"Obstacle will move into robot's path\", \"Battery will run low in 5 minutes\", \"Successful task completion\").\n        2.  `prediction_confidence`: number (0.0 to 1.0, where 1.0 is absolute certainty. This is your confidence in the prediction's occurrence.)\n        3.  `urgency_flag`: boolean (True if the predicted event requires immediate action or poses a significant opportunity/threat, False otherwise.)\n        4.  `llm_reasoning`: string (Detailed explanation for your prediction, referencing specific contextual inputs and any perceived causal links or patterns.)\n\n        Consider:\n        -   **Sensory Qualia**: Are there any immediate `description_summary` or high `salience_score` events that indicate an imminent change?\n        -   **World Model State**: Are there `changed_entities` or `inconsistencies`? Are dynamic objects moving in predictable ways?\n        -   **Memory Responses**: Are there recalled `patterns`, `causal_link`s, or past `event_sequences` that apply to the current situation?\n        -   **Cognitive Directives**: Was there a directive to `PredictEvent` about a specific `topic`?\n        -   **Attention State**: What is the robot currently `focus_target`ing? Predictions might be related to this.\n        -   **Motivation State**: What is the `dominant_goal_id`? Predict outcomes related to achieving or hindering this goal.\n\n        Your response must be in JSON format, containing:\n        1.  'timestamp': string (current ROS time)\n        2.  'predicted_event': string\n        3.  'prediction_confidence': number\n        4.  'urgency_flag': boolean\n        5.  'llm_reasoning': string\n        \"\"\"\n        response_schema = {\n            \"type\": \"object\",\n            \"properties\": {\n                \"timestamp\": {\"type\": \"string\"},\n                \"predicted_event\": {\"type\": \"string\"},\n                \"prediction_confidence\": {\"type\": \"number\", \"minimum\": 0.0, \"maximum\": 1.0},\n                \"urgency_flag\": {\"type\": \"boolean\"},\n                \"llm_reasoning\": {\"type\": \"string\"}\n            },\n            \"required\": [\"timestamp\", \"predicted_event\", \"prediction_confidence\", \"urgency_flag\", \"llm_reasoning\"]\n        }\n\n        llm_output_str = await self._call_llm_api(prompt_text, response_schema, temperature=0.2, max_tokens=300)\n\n        if not llm_output_str.startswith(\"Error:\"):\n            try:\n                llm_data = json.loads(llm_output_str)\n                # Ensure numerical/boolean fields are floats/booleans\n                if 'prediction_confidence' in llm_data: llm_data['prediction_confidence'] = float(llm_data['prediction_confidence'])\n                if 'urgency_flag' in llm_data: llm_data['urgency_flag'] = bool(llm_data['urgency_flag'])\n                return llm_data\n            except json.JSONDecodeError as e:\n                self._report_error(\"LLM_PARSE_ERROR\", f\"Failed to parse LLM response for prediction: {e}. Raw: {llm_output_str}\", 0.8)\n                return None\n        else:\n            self._report_error(\"LLM_PREDICTION_FAILED\", f\"LLM call failed for prediction: {llm_output_str}\", 0.9)\n            return None\n\n    def _apply_simple_prediction_rules(self):\n        \"\"\"\n        Fallback mechanism to generate a simple prediction using rule-based logic\n        if LLM is not triggered or fails.\n        \"\"\"\n        current_time = rospy.get_time()\n        \n        predicted_event = \"System status remains stable.\"\n        prediction_confidence = 0.7\n        urgency_flag = False\n\n        # Rule 1: Predict low battery if current world model (or other system health sensor) indicates it\n        if self.recent_world_model_states: # Assuming world model can reflect robot's own status\n            latest_world_state = self.recent_world_model_states[-1]\n            time_since_world_state = current_time - float(latest_world_state.get('timestamp', 0.0))\n            if time_since_world_state < 2.0 and \\\n               any(entity.get('name') == 'robot_self' and entity.get('status') == 'low_power' for entity in latest_world_state.get('changed_entities', [])):\n                predicted_event = \"Robot's battery will run low soon, requiring recharge.\"\n                prediction_confidence = 0.9\n                urgency_flag = True\n                rospy.logwarn(f\"{self.node_name}: Simple rule: Predicted low battery.\")\n                return predicted_event, prediction_confidence, urgency_flag\n\n        # Rule 2: Predict obstacle encounter if close object detected visually or via lidar\n        if self.recent_sensory_qualia:\n            latest_qualia = self.recent_sensory_qualia[-1]\n            time_since_qualia = current_time - float(latest_qualia.get('timestamp', 0.0))\n            if time_since_qualia < 0.5 and latest_qualia.get('qualia_type') == 'proximity_alert' and latest_qualia.get('salience_score', 0.0) > 0.7:\n                predicted_event = \"An obstacle is directly in the robot's immediate path.\"\n                prediction_confidence = 0.95\n                urgency_flag = True\n                rospy.logwarn(f\"{self.node_name}: Simple rule: Predicted obstacle encounter.\")\n                return predicted_event, prediction_confidence, urgency_flag\n\n        # Rule 3: Predict task completion if dominant goal has high drive and no recent issues\n        if self.recent_motivation_states and self.recent_world_model_states:\n            latest_motivation = self.recent_motivation_states[-1]\n            latest_world_state = self.recent_world_model_states[-1] # Check for lack of obstacles/changes\n            \n            time_since_motivation = current_time - float(latest_motivation.get('timestamp', 0.0))\n            time_since_world_state = current_time - float(latest_world_state.get('timestamp', 0.0))\n\n            if time_since_motivation < 2.0 and latest_motivation.get('overall_drive_level', 0.0) > 0.8 and \\\n               time_since_world_state < 2.0 and not latest_world_state.get('significant_change_flag', False):\n                predicted_event = f\"Current goal '{latest_motivation.get('dominant_goal_id')}' likely to be completed successfully.\"\n                prediction_confidence = 0.8\n                urgency_flag = False\n                rospy.logwarn(f\"{self.node_name}: Simple rule: Predicted successful task completion.\")\n                return predicted_event, prediction_confidence, urgency_flag\n\n        rospy.logdebug(f\"{self.node_name}: Simple rule: Generated default prediction.\")\n        return predicted_event, prediction_confidence, urgency_flag\n\n\n    def _compile_llm_context_for_prediction(self):\n        \"\"\"\n        Gathers and formats all relevant cognitive state data for the LLM's\n        prediction generation.\n        \"\"\"\n        context = {\n            \"current_time\": rospy.get_time(),\n            \"last_prediction\": self.last_generated_prediction,\n            \"recent_cognitive_inputs\": {\n                \"sensory_qualia\": list(self.recent_sensory_qualia),\n                \"world_model_states\": list(self.recent_world_model_states),\n                \"memory_responses\": list(self.recent_memory_responses),\n                \"cognitive_directives_for_self\": [d for d in self.recent_cognitive_directives if d.get('target_node') == self.node_name],\n                \"attention_state\": self.recent_attention_states[-1] if self.recent_attention_states else \"N/A\",\n                \"motivation_state\": self.recent_motivation_states[-1] if self.recent_motivation_states else \"N/A\"\n            }\n        }\n        \n        # Deep parse any nested JSON strings in context for better LLM understanding\n        for category_key in context[\"recent_cognitive_inputs\"]:\n            for i, item in enumerate(context[\"recent_cognitive_inputs\"][category_key]):\n                if isinstance(item, dict):\n                    for field, value in item.items():\n                        if isinstance(value, str) and field.endswith('_json'):\n                            try:\n                                item[field] = json.loads(value)\n                            except json.JSONDecodeError:\n                                pass # Keep as string if not valid JSON\n\n        return context\n\n    # --- Database and Publishing Functions ---\n    def save_prediction_log(self, id, timestamp, predicted_event, prediction_confidence, prediction_accuracy, urgency_flag, llm_reasoning, context_snapshot_json):\n        \"\"\"Saves a prediction entry to the SQLite database.\"\"\"\n        try:\n            self.cursor.execute('''\n                INSERT INTO predictions (id, timestamp, predicted_event, prediction_confidence, prediction_accuracy, urgency_flag, llm_reasoning, context_snapshot_json)\n                VALUES (?, ?, ?, ?, ?, ?, ?, ?)\n            ''', (id, timestamp, predicted_event, prediction_confidence, prediction_accuracy, urgency_flag, llm_reasoning, context_snapshot_json))\n            self.conn.commit()\n            rospy.logdebug(f\"{self.node_name}: Saved prediction log (ID: {id}, Event: {predicted_event}).\")\n        except sqlite3.Error as e:\n            self._report_error(\"DB_SAVE_ERROR\", f\"Failed to save prediction log: {e}\", 0.9)\n        except Exception as e:\n            self._report_error(\"UNEXPECTED_SAVE_ERROR\", f\"Unexpected error in save_prediction_log: {e}\", 0.9)\n\n\n    def publish_prediction_state(self, event):\n        \"\"\"Publishes the robot's current prediction state.\"\"\"\n        timestamp = str(rospy.get_time())\n        # Update timestamp before publishing\n        self.last_generated_prediction['timestamp'] = timestamp\n        \n        try:\n            if isinstance(PredictionState, type(String)): # Fallback to String message\n                self.pub_prediction_state.publish(json.dumps(self.last_generated_prediction))\n            else:\n                prediction_msg = PredictionState()\n                prediction_msg.timestamp = timestamp\n                prediction_msg.predicted_event = self.last_generated_prediction['predicted_event']\n                prediction_msg.prediction_confidence = self.last_generated_prediction['prediction_confidence']\n                prediction_msg.prediction_accuracy = self.last_generated_prediction['prediction_accuracy']\n                prediction_msg.urgency_flag = self.last_generated_prediction['urgency_flag']\n                self.pub_prediction_state.publish(prediction_msg)\n\n            rospy.logdebug(f\"{self.node_name}: Published Prediction State. Event: '{self.last_generated_prediction['predicted_event']}'.\")\n\n        except Exception as e:\n            self._report_error(\"PUBLISH_PREDICTION_STATE_ERROR\", f\"Failed to publish prediction state: {e}\", 0.7)\n\n    def publish_cognitive_directive(self, directive_type, target_node, command_payload, urgency, reason=\"\"):\n        \"\"\"Helper to publish a CognitiveDirective message.\"\"\"\n        timestamp = str(rospy.get_time())\n        try:\n            if isinstance(CognitiveDirective, type(String)): # Fallback to String message\n                directive_data = {\n                    'timestamp': timestamp,\n                    'directive_type': directive_type,\n                    'target_node': target_node,\n                    'command_payload': command_payload, # Already JSON string\n                    'urgency': urgency,\n                    'reason': reason\n                }\n                self.pub_cognitive_directive.publish(json.dumps(directive_data))\n            else:\n                directive_msg = CognitiveDirective()\n                directive_msg.timestamp = timestamp\n                directive_msg.directive_type = directive_type\n                directive_msg.target_node = target_node\n                directive_msg.command_payload = command_payload\n                directive_msg.urgency = urgency\n                directive_msg.reason = reason\n                self.pub_cognitive_directive.publish(directive_msg)\n            rospy.logdebug(f\"{self.node_name}: Issued Cognitive Directive '{directive_type}' to '{target_node}'.\")\n        except Exception as e:\n            rospy.logerr(f\"{self.node_name}: Failed to issue cognitive directive from Prediction Node: {e}\")\n\n\n    def run(self):\n        \"\"\"Starts the ROS node and keeps it spinning.\"\"\"\n        rospy.spin()\n\n    def __del__(self):\n        \"\"\"Ensures the database connection is closed on node shutdown and async loop is stopped.\"\"\"\n        rospy.loginfo(f\"{self.node_name} shutting down. Closing database connection and asyncio loop.\")\n        if hasattr(self, 'conn') and self.conn:\n            self.conn.close()\n        self._shutdown_async_loop()\n\nif __name__ == '__main__':\n    try:\n        node = PredictionNode()\n        node.run()\n    except rospy.ROSInterruptException:\n        rospy.loginfo(f\"{rospy.get_name()} interrupted by ROS shutdown.\")\n        if 'node' in locals() and isinstance(node, PredictionNode):\n            node._shutdown_async_loop()\n            if hasattr(node, 'conn'): node.conn.close()\n    except Exception as e:\n        rospy.logerr(f\"{rospy.get_name()} encountered an unexpected error: {e}\")\n        if 'node' in locals() and isinstance(node, PredictionNode):\n            node._shutdown_async_loop()\n            if hasattr(node, 'conn'): node.conn.close()","outputs":[],"execution_count":null,"metadata":{}}],"metadata":{"colab":{"from_bard":true},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}